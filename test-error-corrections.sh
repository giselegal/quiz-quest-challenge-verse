#!/bin/bash

echo "üß™ TESTE DE CORRE√á√ÉO DE ERROS DE CONSOLE"
echo "========================================"

# Verificar se o servidor est√° rodando
echo "üì° 1. Verificando servidor..."
curl -s http://localhost:5000 > /dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ Servidor respondendo na porta 5000"
else
    echo "‚ùå Servidor n√£o est√° respondendo"
    exit 1
fi

# Testar APIs schema-driven
echo "üì° 2. Testando API Schema-driven..."
RESPONSE=$(curl -s -w "%{http_code}" http://localhost:5000/api/schema-driven/funnels)
HTTP_CODE=${RESPONSE: -3}
if [ "$HTTP_CODE" = "200" ]; then
    echo "‚úÖ API Schema-driven funcionando (HTTP $HTTP_CODE)"
else
    echo "‚ùå API Schema-driven com problema (HTTP $HTTP_CODE)"
fi

# Testar APIs principais
echo "üì° 3. Testando APIs principais..."
for endpoint in "quiz-results" "conversion-events" "utm-analytics"; do
    HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null http://localhost:5000/api/$endpoint)
    if [ "$HTTP_CODE" = "200" ]; then
        echo "‚úÖ /api/$endpoint - OK ($HTTP_CODE)"
    else
        echo "‚ùå /api/$endpoint - PROBLEMA ($HTTP_CODE)"
    fi
done

echo ""
echo "üéØ RESUMO DAS CORRE√á√ïES APLICADAS:"
echo "=================================="
echo "‚úÖ Melhor tratamento de erro em checkOrphanFunnels()"
echo "‚úÖ Inicializa√ß√£o tolerante a falhas do LocalStorageFixer"
echo "‚úÖ Filtro de console para logs externos desnecess√°rios"
echo "‚úÖ Logs mais informativos e menos polu√≠dos"
echo ""
echo "üåê Para testar no browser:"
echo "  http://localhost:5000"
echo ""
echo "üìã Logs que devem estar limpos agora:"
echo "  - ‚ùå Erro ao verificar funnels √≥rf√£os: {}"
echo "  - Logs de Grafana, RUM collection suprimidos"
echo "  - Errors 404/500 de servi√ßos externos filtrados"
