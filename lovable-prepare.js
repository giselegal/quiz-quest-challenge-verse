#!/usr/bin/env node

/**
 * Script personalizado para preparar componentes Lovable
 * Substitui o lovable-tagger que n√£o est√° funcionando
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üè∑Ô∏è Preparando componentes para Lovable...');

// Fun√ß√£o principal
async function main() {

// Fun√ß√£o para marcar componentes React como compat√≠veis com Lovable
function tagLovableComponents() {
  const srcDir = path.join(__dirname, 'src');
  const componentsDir = path.join(srcDir, 'components');
  
  if (!fs.existsSync(componentsDir)) {
    console.log('‚ùå Diret√≥rio de componentes n√£o encontrado');
    return;
  }

  // Criar diret√≥rio lovable se n√£o existir
  const lovableDir = path.join(componentsDir, 'lovable');
  if (!fs.existsSync(lovableDir)) {
    fs.mkdirSync(lovableDir, { recursive: true });
    console.log('‚úÖ Diret√≥rio lovable criado');
  }

  // Criar arquivo de configura√ß√£o dos componentes Lovable
  const configContent = `// Componentes marcados para edi√ß√£o no Lovable
export const LOVABLE_COMPONENTS = {
  QuizCover: '/src/components/quiz/QuizCover.tsx',
  QuizQuestion: '/src/components/quiz/QuizQuestion.tsx', 
  QuizLogic: '/src/components/quiz/QuizLogic.tsx',
  ResultPageEditor: '/src/components/quiz/ResultPageEditor.tsx',
  EnchantedEffects: '/src/components/effects/EnchantedEffects.tsx'
};

export default LOVABLE_COMPONENTS;
`;

  fs.writeFileSync(path.join(lovableDir, 'config.js'), configContent);
  console.log('‚úÖ Configura√ß√£o de componentes Lovable criada');
}

// Fun√ß√£o para verificar configura√ß√£o do Lovable
function checkLovableConfig() {
  const lovableFile = path.join(__dirname, '.lovable');
  
  if (!fs.existsSync(lovableFile)) {
    console.log('‚ùå Arquivo .lovable n√£o encontrado');
    return false;
  }

  try {
    const config = JSON.parse(fs.readFileSync(lovableFile, 'utf8'));
    console.log('‚úÖ Configura√ß√£o .lovable v√°lida');
    console.log('   - Auto-sync from GitHub:', config.github?.autoSyncFromGithub ? '‚úÖ' : '‚ùå');
    console.log('   - Auto-push to GitHub:', config.github?.autoPushToGithub ? '‚úÖ' : '‚ùå');
    console.log('   - Branch:', config.github?.branch || 'n√£o definida');
    return true;
  } catch (error) {
    console.log('‚ùå Arquivo .lovable inv√°lido:', error.message);
    return false;
  }
}

// Fun√ß√£o para verificar workflow do GitHub Actions
function checkGitHubWorkflow() {
  const workflowFile = path.join(__dirname, '.github/workflows/lovable-deploy.yml');
  
  if (!fs.existsSync(workflowFile)) {
    console.log('‚ùå Workflow lovable-deploy.yml n√£o encontrado');
    return false;
  }

  console.log('‚úÖ Workflow GitHub Actions configurado');
  return true;
}

// Executar verifica√ß√µes
console.log('\nüìã Verificando configura√ß√£o do Lovable...\n');

tagLovableComponents();
const hasValidConfig = checkLovableConfig();
const hasWorkflow = checkGitHubWorkflow();

console.log('\nüìä Resumo da configura√ß√£o:');
console.log('- Componentes preparados: ‚úÖ');
console.log('- Arquivo .lovable:', hasValidConfig ? '‚úÖ' : '‚ùå');
console.log('- Workflow GitHub:', hasWorkflow ? '‚úÖ' : '‚ùå');

if (hasValidConfig && hasWorkflow) {
  console.log('\nüéâ Configura√ß√£o do Lovable est√° completa!');
  console.log('\nüìù Pr√≥ximos passos:');
  console.log('1. Verifique se o token LOVABLE_TOKEN est√° configurado no GitHub');
  console.log('2. Conecte o reposit√≥rio no Lovable Studio');
  console.log('3. Teste a sincroniza√ß√£o fazendo uma altera√ß√£o no Lovable Studio');
} else {
  console.log('\n‚ö†Ô∏è Configura√ß√£o incompleta. Verificar problemas identificados.');
}

}

// Executar fun√ß√£o principal
main().catch(console.error);
