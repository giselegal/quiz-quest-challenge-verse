#!/bin/bash

echo "üßπ SCRIPT DE LIMPEZA CR√çTICA - RESOLU√á√ÉO DE GARGALOS"
echo "=================================================="

# Verificar se estamos no diret√≥rio correto
if [ ! -d "client/src" ]; then
    echo "‚ùå Execute este script na raiz do projeto!"
    exit 1
fi

echo ""
echo "üîç FASE 1: IDENTIFICANDO CONFLITOS..."

# 1. DUPLICA√á√ÉO QUIZCONTENT
echo ""
echo "üìÑ 1. Analisando QuizContent duplicado:"
echo "   - client/src/components/QuizContent.tsx"
echo "   - client/src/components/quiz/QuizContent.tsx"

# Verificar qual √© usado mais
QUIZ_CONTENT_USAGE_1=$(grep -r "from.*components/QuizContent" client/src/ 2>/dev/null | wc -l)
QUIZ_CONTENT_USAGE_2=$(grep -r "from.*quiz/QuizContent" client/src/ 2>/dev/null | wc -l)

echo "   - Uso de components/QuizContent: $QUIZ_CONTENT_USAGE_1 arquivos"
echo "   - Uso de quiz/QuizContent: $QUIZ_CONTENT_USAGE_2 arquivos"

if [ $QUIZ_CONTENT_USAGE_2 -gt $QUIZ_CONTENT_USAGE_1 ]; then
    echo "   ‚Üí DECIS√ÉO: Manter quiz/QuizContent.tsx (mais usado)"
    KEEP_QUIZ_CONTENT="quiz/QuizContent.tsx"
    REMOVE_QUIZ_CONTENT="QuizContent.tsx"
else
    echo "   ‚Üí DECIS√ÉO: Manter components/QuizContent.tsx (mais usado)"
    KEEP_QUIZ_CONTENT="QuizContent.tsx"
    REMOVE_QUIZ_CONTENT="quiz/QuizContent.tsx"
fi

# 2. DUPLICA√á√ÉO USE-MOBILE
echo ""
echo "üì± 2. Analisando use-mobile duplicado:"
echo "   - client/src/hooks/use-mobile.ts"
echo "   - client/src/hooks/use-mobile.tsx"

USE_MOBILE_TS_USAGE=$(grep -r "from.*use-mobile" client/src/ 2>/dev/null | grep -v ".tsx" | wc -l)
USE_MOBILE_TSX_USAGE=$(grep -r "from.*use-mobile" client/src/ 2>/dev/null | grep ".tsx" | wc -l)

echo "   - Uso de use-mobile.ts: $USE_MOBILE_TS_USAGE arquivos"
echo "   - Uso de use-mobile.tsx: $USE_MOBILE_TSX_USAGE arquivos"
echo "   ‚Üí DECIS√ÉO: Manter use-mobile.ts (padr√£o TypeScript)"

# 3. DUPLICA√á√ÉO IMAGECHECKER
echo ""
echo "üñºÔ∏è 3. Analisando ImageChecker duplicado:"
echo "   - client/src/utils/ImageChecker.js"
echo "   - client/src/utils/ImageChecker.ts"

IMAGECHECKER_JS_USAGE=$(grep -r "ImageChecker" client/src/ 2>/dev/null | grep ".js" | wc -l)
IMAGECHECKER_TS_USAGE=$(grep -r "ImageChecker" client/src/ 2>/dev/null | grep ".ts" | wc -l)

echo "   - Uso de ImageChecker.js: $IMAGECHECKER_JS_USAGE refer√™ncias"
echo "   - Uso de ImageChecker.ts: $IMAGECHECKER_TS_USAGE refer√™ncias"
echo "   ‚Üí DECIS√ÉO: Manter ImageChecker.ts (TypeScript)"

echo ""
echo "üéÆ FASE 2: ANALISANDO SISTEMAS DE QUIZ..."

# Sistemas de Quiz identificados
echo ""
echo "üìä Sistemas de Quiz encontrados:"
echo "   - QuizPage.tsx (components/)"
echo "   - CaktoQuizPage.tsx (pages/)"
echo "   - QuizFlow.tsx (components/)"
echo "   - CaktoQuizFlow.tsx (components/quiz/)"

echo ""
echo "üßÆ Engines de C√°lculo encontrados:"
echo "   - caktoQuizEngine.ts (lib/)"
echo "   - quizCalculation.ts (lib/)"
echo "   - resultsCalculator.ts (utils/)"
echo "   - styleCalculation.ts (utils/)"

echo ""
echo "üéØ FASE 3: PLANO DE CORRE√á√ÉO"
echo "=========================="

echo ""
echo "üö® A√á√ïES RECOMENDADAS (CR√çTICAS):"
echo ""
echo "1. üóëÔ∏è REMOVER DUPLICA√á√ïES:"
echo "   rm client/src/components/$REMOVE_QUIZ_CONTENT"
echo "   rm client/src/hooks/use-mobile.tsx"  
echo "   rm client/src/utils/ImageChecker.js"
echo ""
echo "2. üîÑ UNIFICAR SISTEMAS DE QUIZ:"
echo "   - Consolidar CaktoQuizFlow como sistema principal"
echo "   - Migrar l√≥gica de QuizPage para CaktoQuizPage"
echo "   - Remover QuizFlow obsoleto"
echo ""
echo "3. üßÆ CONSOLIDAR C√ÅLCULOS:"
echo "   - Manter caktoQuizEngine.ts como principal"
echo "   - Migrar fun√ß√µes √∫teis dos outros engines"
echo "   - Remover duplica√ß√µes de c√°lculo"

echo ""
echo "‚ö†Ô∏è A√á√ïES RECOMENDADAS (OTIMIZA√á√ÉO):"
echo ""
echo "4. üìÅ LIMPAR ARQUIVOS OBSOLETOS:"
echo "   - Remover componentes n√£o usados do editor"
echo "   - Consolidar arquivos de configura√ß√£o"
echo "   - Organizar utilit√°rios por categoria"
echo ""
echo "5. üñºÔ∏è OTIMIZAR IMAGENS:"
echo "   - Consolidar sistemas de otimiza√ß√£o"
echo "   - Implementar preload eficiente"
echo "   - Remover URLs quebradas restantes"

echo ""
echo "‚úÖ FASE 4: STATUS ATUAL"
echo "======================"
echo ""
echo "üü¢ FUNCIONANDO:"
echo "   - Build passando"
echo "   - Servidor rodando" 
echo "   - imageManager.ts corrigido"
echo "   - Estrutura de pastas organizada"
echo ""
echo "üü° PROBLEMAS M√âDIOS:"
echo "   - Duplica√ß√µes causando confus√£o"
echo "   - M√∫ltiplos sistemas competindo"
echo "   - Performance sub√≥tima"
echo ""
echo "üî¥ PROBLEMAS CR√çTICOS:"
echo "   - Arquitetura complexa demais"
echo "   - L√≥gica fragmentada"
echo "   - Manuten√ß√£o dif√≠cil"

echo ""
echo "üéØ RECOMENDA√á√ÉO FINAL:"
echo "====================="
echo ""
echo "PRIORIDADE ALTA: Executar limpeza das duplica√ß√µes imediatamente"
echo "PRIORIDADE M√âDIA: Consolidar sistemas de quiz em 1 semana"
echo "PRIORIDADE BAIXA: Otimiza√ß√µes de performance futuras"
echo ""
echo "STATUS: üü° FUNCIONAL MAS NECESSITA LIMPEZA URGENTE"

exit 0
