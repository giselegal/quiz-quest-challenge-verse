Parte 1:

// src/components/blocks/quiz/QuizIntroBlock.tsx
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button'; // Ajuste o caminho relativo
import { Input } from '@/components/ui/input';   // Ajuste o caminho relativo
import { Label } from '@/components/ui/label';   // Ajuste o caminho relativo
import { InlineEditableText } from '../../editor/blocks/InlineEditableText'; // Ajuste o caminho relativo

// Interface para as cores aninhadas
interface QuizIntroBlockColors {
  primary: string;
  secondary: string;
  accent: string;
  background: string;
  text: string;
}

// Interface de props para o componente QuizIntroBlock
interface QuizIntroBlockProps {
  blockId: string; // ID do bloco, útil para o editor
  title?: string;
  subtitle?: string;
  logoUrl?: string;
  logoAlt?: string;
  introImageUrl?: string;
  introImageAlt?: string;
  namePlaceholder?: string;
  buttonTextEmpty?: string;
  buttonTextFilled?: string;
  privacyText?: string;
  footerText?: string;
  required?: boolean;
  maxLength?: number;
  maxWidth?: string; // Para controlar a largura máxima do conteúdo
  backgroundGradient?: string; // Para o fundo do bloco

  colors?: QuizIntroBlockColors; // Cores para estilização

  // Props adicionais para integração com o editor
  onSaveInline: (key: string) => (newValue: string) => void; // Handler para edição inline
  isSelected?: boolean; // Indica se o bloco está selecionado no editor
  style?: React.CSSProperties; // Estilos gerais do bloco passados pelo editor
  disabled?: boolean; // Para desabilitar interações reais no editor
}

export const QuizIntroBlock: React.FC<QuizIntroBlockProps> = ({
  blockId,
  title,
  subtitle,
  logoUrl,
  logoAlt,
  introImageUrl,
  introImageAlt,
  namePlaceholder,
  buttonTextEmpty,
  buttonTextFilled,
  privacyText,
  footerText,
  required,
  maxLength,
  maxWidth,
  backgroundGradient,
  colors,
  onSaveInline,
  isSelected,
  style,
  disabled, // Prop para desabilitar interações no editor
}) => {
  const [userNameInput, setUserNameInput] = useState('');
  const [isButtonDisabled, setIsButtonDisabled] = useState(true);

  // Lógica do componente real (mantida)
  useEffect(() => {
    if (required) {
      setIsButtonDisabled(userNameInput.trim().length === 0);
    } else {
      setIsButtonDisabled(false);
    }
  }, [userNameInput, required]);

  const handleStart = () => {
    if (required && userNameInput.trim().length === 0) {
      console.warn('Nome é obrigatório!'); // No editor, apenas um console.warn
      return;
    }
    console.log('Quiz iniciado para:', userNameInput);
    // Na aplicação real, aqui você navegaria para a próxima etapa
  };

  // Cores padrão ou as passadas via props
  const primaryColor = colors?.primary || '#B89B7A';
  const secondaryColor = colors?.secondary || '#432818';
  const accentColor = colors?.accent || '#6B4F43';
  const backgroundColor = colors?.background || '#ffffff';
  const textColor = colors?.text || '#432818';

  return (
    <div
      id={blockId} // Importante para o editor identificar o bloco
      className={`relative min-h-screen flex flex-col items-center justify-center p-4 md:p-8 overflow-hidden font-montserrat ${isSelected ? 'outline-2 outline-blue-500 outline-offset-2' : ''}`}
      style={{
        backgroundColor: backgroundColor,
        color: textColor,
        background: backgroundGradient || backgroundColor,
        ...style // Aplica estilos gerais do editor (margens, etc.)
      }}
    >
      {/* Imagem de fundo/introdução fixa */}
      {introImageUrl && (
        <img
          src={introImageUrl}
          alt={introImageAlt || 'Imagem de Introdução'}
          className="absolute inset-0 w-full h-full object-cover z-0 opacity-20"
          onError={(e) => { (e.currentTarget.src = 'https://placehold.co/1200x800/cccccc/333333?text=Intro+Image'); }}
        />
      )}

      <div
        className="relative z-10 w-full max-w-md bg-white/90 backdrop-blur-sm rounded-2xl shadow-xl p-6 md:p-8 text-center space-y-6 border border-gray-100"
        style={{ maxWidth: maxWidth || '38rem', color: textColor }}
      >
        {logoUrl && (
          <img
            src={logoUrl}
            alt={logoAlt || 'Logo'}
            className="mx-auto h-16 md:h-20 object-contain mb-4"
            onError={(e) => { (e.currentTarget.src = 'https://placehold.co/160x60/cccccc/333333?text=Logo'); }}
          />
        )}

        <h1 className="text-3xl md:text-4xl font-playfair font-bold leading-tight" style={{ color: secondaryColor }}>
          {/* Edição inline para o título. Suporta HTML interno para destaque de cor. */}
          <InlineEditableText
            tag="h1"
            value={title || '<span class="text-[#B89B7A]">Chega</span> de um guarda-roupa lotado...'}
            onSave={onSaveInline('title')}
            className="inline-block w-full"
            style={{ color: secondaryColor }} // Garante a cor do título no editor
          />
        </h1>

        <p className="text-base md:text-lg leading-relaxed" style={{ color: textColor }}>
          {/* Edição inline para o subtítulo */}
          <InlineEditableText
            isTextArea
            value={subtitle || 'Em poucos minutos, descubra seu Estilo Predominante — e aprenda a montar looks que realmente refletem sua essência, com praticidade e confiança.'}
            onSave={onSaveInline('subtitle')}
            className="inline-block w-full"
            style={{ color: textColor }}
          />
        </p>

        <div className="space-y-4">
          <div>
            <Label htmlFor="userName" className="sr-only">Nome</Label>
            <Input
              id="userName"
              type="text"
              placeholder={namePlaceholder || 'Digite seu nome aqui...'}
              value={userNameInput}
              onChange={(e) => setUserNameInput(e.target.value)}
              className="w-full p-3 border-2 rounded-xl focus:ring-2 focus:ring-offset-2"
              style={{
                borderColor: primaryColor,
                backgroundColor: 'white',
                color: textColor,
                '--tw-ring-color': primaryColor + '40', // Tailwind ring color
              } as React.CSSProperties}
              maxLength={maxLength}
              disabled={disabled} // Desabilita o input no editor
            />
          </div>
          <Button
            onClick={handleStart}
            disabled={isButtonDisabled || disabled} // Desabilita o botão no editor
            className="w-full py-3 md:py-4 rounded-full text-lg font-semibold transition-all transform hover:scale-105 shadow-lg"
            style={{ backgroundColor: primaryColor, color: 'white' }}
          >
            {isButtonDisabled ? (
              // Edição inline para o texto do botão quando desabilitado
              <InlineEditableText
                tag="span"
                value={buttonTextEmpty || 'Preencha seu nome primeiro'}
                onSave={onSaveInline('buttonTextEmpty')}
                className="inline-block"
                style={{ color: 'white' }}
              />
            ) : (
              // Edição inline para o texto do botão quando habilitado
              <InlineEditableText
                tag="span"
                value={buttonTextFilled || 'Quero Descobrir meu Estilo Agora!'}
                onSave={onSaveInline('buttonTextFilled')}
                className="inline-block"
                style={{ color: 'white' }}
              />
            )}
          </Button>
        </div>

        {privacyText && (
          <p className="text-xs text-gray-500" style={{ color: accentColor }}>
            {/* Edição inline para o texto de privacidade */}
            <InlineEditableText
              tag="p"
              value={privacyText}
              onSave={onSaveInline('privacyText')}
              className="inline-block"
              style={{ color: accentColor }}
            />
          </p>
        )}
      </div>

      {footerText && (
        <p className="relative z-10 text-xs mt-4 text-gray-400" style={{ color: accentColor }}>
          {/* Edição inline para o texto do rodapé */}
          <InlineEditableText
            tag="p"
            value={footerText}
            onSave={onSaveInline('footerText')}
            className="inline-block"
            style={{ color: accentColor }}
          />
        </p>
      )}
    </div>
  );
};


Parte 2:

// src/components/editor/blocks/QuestionMultipleBlock.tsx
import React from 'react';
import { CheckCircle } from 'lucide-react';
import { InlineEditableText } from './InlineEditableText'; // Ajuste o caminho relativo

// Interface para cada opção de pergunta
interface QuestionOption {
  id: string;
  text: string;
  value: string;
  imageUrl?: string;
}

// Interface de props para o componente QuestionMultipleBlock
interface QuestionMultipleBlockProps {
  question?: string;
  options?: QuestionOption[];
  required?: boolean;
  multipleSelection?: boolean;
  maxSelections?: number;
  // Props de layout (do schema)
  columns?: string; // '1', '2', '3', '4'
  direction?: 'vertical' | 'horizontal';
  contentLayout?: 'text-image' | 'text-only' | 'image-only';
  // Props de estilização (do schema)
  borderStyle?: 'none' | 'sm' | 'md' | 'lg';
  shadowStyle?: 'none' | 'sm' | 'md' | 'lg';
  spacing?: 'sm' | 'md' | 'lg';
  detailStyle?: 'none' | 'simple' | 'full';
  optionVisualStyle?: 'simple' | 'card';
  // Cores (do schema, via nestedPath colors.primary, etc.)
  primaryColor?: string;
  textColor?: string;
  borderColor?: string;

  // Props adicionais para integração com o editor
  onSaveInline: (key: string) => (newValue: string) => void; // Para edição inline do texto da pergunta
  isSelected?: boolean; // Indica se o bloco está selecionado no editor
  style?: React.CSSProperties; // Estilos gerais do bloco passados pelo editor
  disabled?: boolean; // Para desabilitar interações reais no editor
}

export const QuestionMultipleBlock: React.FC<QuestionMultipleBlockProps> = ({
  question,
  options,
  required,
  multipleSelection,
  maxSelections,
  // Layout
  columns,
  direction,
  contentLayout,
  // Estilização
  borderStyle,
  shadowStyle,
  spacing,
  detailStyle,
  optionVisualStyle,
  // Cores
  primaryColor,
  textColor,
  borderColor,
  onSaveInline,
  isSelected,
  style,
  disabled, // Prop para desabilitar interações no editor
}) => {
  // Opções padrão para visualização no editor se nenhuma for fornecida
  const defaultOptions: QuestionOption[] = [
    { id: 'a', text: 'Opção A', value: 'a' },
    { id: 'b', text: 'Opção B', value: 'b' },
    { id: 'c', text: 'Opção C', value: 'c' },
    { id: 'd', text: 'Opção D', value: 'd' },
  ];
  const currentOptions = options && options.length > 0 ? options : defaultOptions;

  // Funções helper para aplicar classes CSS com base nas props de estilo
  const getBorderClass = (style: string | undefined) => {
    switch (style) {
      case 'sm': return 'border-2 rounded-md';
      case 'md': return 'border-3 rounded-lg';
      case 'lg': return 'border-4 rounded-xl';
      default: return 'border'; // 'none' ou default
    }
  };

  const getShadowClass = (style: string | undefined) => {
    switch (style) {
      case 'sm': return 'shadow-sm';
      case 'md': return 'shadow-md';
      case 'lg': return 'shadow-lg';
      default: return ''; // 'none' ou default
    }
  };

  const getSpacingClass = (style: string | undefined) => {
    switch (style) {
      case 'sm': return 'gap-2';
      case 'md': return 'gap-4';
      case 'lg': return 'gap-6';
      default: return 'gap-4';
    }
  };

  // Lógica para determinar se há imagens nas opções e o layout
  const hasImagesInOptions = currentOptions.some(opt => opt.imageUrl && contentLayout !== 'text-only');
  const gridColsClass = columns ? `grid-cols-${columns}` : 'grid-cols-2';
  const isHorizontal = direction === 'horizontal';

  return (
    <div
      style={style} // Aplica estilos gerais do bloco (margens, padding, etc.)
      className={`py-6 ${isSelected ? 'outline-2 outline-blue-500 outline-offset-2' : ''}`}
    >
      <div className={`space-y-6 max-w-5xl mx-auto ${isHorizontal ? 'flex flex-row flex-wrap justify-center' : ''} ${getSpacingClass(spacing)}`}>
        <h3 className="text-xl md:text-2xl font-semibold text-[#432818] text-center leading-relaxed mb-8">
          {/* Edição inline para o texto da pergunta */}
          <InlineEditableText
            tag="h3"
            value={question || 'Qual é a sua pergunta?'}
            onSave={onSaveInline('question')}
            className="inline-block w-full"
          />
        </h3>

        <div className={`grid ${gridColsClass} ${getSpacingClass(spacing)} ${isHorizontal ? 'flex-1' : 'w-full'}`}>
          {currentOptions.map((option, index) => (
            <div
              key={option.id}
              className={`
                border-2
                ${getBorderClass(borderStyle)}
                ${getShadowClass(shadowStyle)}
                ${borderColor ? `border-[${borderColor}]` : 'border-[#B89B7A]/30'}
                hover:border-[#B89B7A] hover:bg-[#f9f4ef] hover:shadow-lg
                rounded-xl transition-all duration-300 cursor-pointer group overflow-hidden
                ${optionVisualStyle === 'card' ? 'p-4' : 'p-0'}
              `}
              style={{ borderColor: borderColor || '' }}
              // Desabilita cliques nas opções no editor
              onClick={disabled ? undefined : () => console.log('Opção selecionada:', option.value)}
            >
              {contentLayout !== 'text-only' && option.imageUrl && hasImagesInOptions ? (
                // Layout com imagem
                <>
                  <div className="aspect-[4/3] overflow-hidden relative bg-gray-100">
                    <img
                      src={option.imageUrl}
                      alt={option.text}
                      className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                      onError={(e) => {
                        (e.currentTarget.src = 'https://placehold.co/600x400/cccccc/333333?text=Erro+Imagem');
                        (e.currentTarget.style.display = 'block'); // Garante que o placeholder seja visível
                      }}
                    />
                    {detailStyle === 'full' && ( // Exemplo de detalhe visual (círculo com letra)
                      <div className="absolute top-4 left-4 w-10 h-10 bg-[#B89B7A] text-white rounded-full flex items-center justify-center font-bold text-base group-hover:bg-[#A1835D] transition-colors shadow-lg" style={{ backgroundColor: primaryColor || '' }}>
                        {String.fromCharCode(65 + index)}
                      </div>
                    )}
                  </div>
                  {contentLayout !== 'image-only' && (
                    <div className="p-5">
                      {/* OBSERVAÇÃO: Texto da opção NÃO editável inline aqui.
                          A edição de itens de array (como o texto das opções) é feita
                          exclusivamente através do painel de propriedades na sidebar direita
                          usando o `array-editor` para manter a robustez e evitar complexidade
                          excessiva na edição inline de dados aninhados. */}
                      <span
                        className={`text-[#432818] group-hover:text-[#432818] text-base leading-relaxed font-medium block`}
                        style={{ color: textColor || '' }}
                        dangerouslySetInnerHTML={{ __html: option.text }} // Permite HTML como negrito
                      />
                    </div>
                  )}
                </>
              ) : (
                // Layout apenas texto
                <div className="p-6">
                  <div className="flex items-start gap-4">
                    {detailStyle !== 'none' && ( // Exemplo de detalhe visual (círculo com letra)
                      <span className={`font-bold ${primaryColor ? `text-[${primaryColor}]` : 'text-[#B89B7A]'} min-w-[40px] h-10 w-10 bg-[#B89B7A]/10 rounded-full flex items-center justify-center group-hover:bg-[#B89B7A] group-hover:text-white transition-all text-base`} style={{ backgroundColor: primaryColor ? `${primaryColor}1A` : '', color: primaryColor || '' }}>
                        {String.fromCharCode(65 + index)}
                      </span>
                    )}
                    {/* OBSERVAÇÃO: Texto da opção NÃO editável inline aqui.
                        A edição de itens de array (como o texto das opções) é feita
                        exclusivamente através do painel de propriedades na sidebar direita
                        usando o `array-editor` para manter a robustez e evitar complexidade
                        excessiva na edição inline de dados aninhados. */}
                    <span
                      className={`text-[#432818] group-hover:text-[#432818] text-base leading-relaxed font-medium flex-1`}
                      style={{ color: textColor || '' }}
                      dangerouslySetInnerHTML={{ __html: option.text }} // Permite HTML como negrito
                    />
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>

        {multipleSelection && (
          <div className="text-center">
            <div className={`inline-flex items-center gap-2 px-4 py-2 rounded-full text-sm font-medium`} style={{ backgroundColor: primaryColor ? `${primaryColor}1A` : '#B89B7A1A', color: primaryColor || '#6B5B73' }}>
              <CheckCircle className="w-4 h-4" />
              Selecione até {maxSelections || 3} opções
            </div>
          </div>
        )}
        {required && (
          <p className="text-sm text-red-500 text-center">
            * Esta pergunta é obrigatória.
          </p>
        )}
      </div>
    </div>
  );
};


Parte 3:

// src/components/editor/blocks/QuizTransitionMainBlock.tsx
import React from 'react';
import { Zap } from 'lucide-react';
import { InlineEditableText } from './InlineEditableText'; // Ajuste o caminho relativo
import { Button } from '@/components/ui/button'; // Ajuste o caminho relativo

// Interface de props para o componente QuizTransitionMainBlock
interface QuizTransitionMainBlockProps {
  title?: string;
  message?: string;
  submessage?: string;
  additionalMessage?: string;
  transitionDuration?: number; // Propriedade de lógica, não visual no editor
  onSaveInline: (key: string) => (newValue: string) => void; // Para edição inline
  isSelected?: boolean; // Indica se o bloco está selecionado no editor
  style?: React.CSSProperties; // Estilos gerais do bloco passados pelo editor
  disabled?: boolean; // Para desabilitar interações reais no editor
}

export const QuizTransitionMainBlock: React.FC<QuizTransitionMainBlockProps> = ({
  title,
  message,
  submessage,
  additionalMessage,
  onSaveInline,
  isSelected,
  style,
  disabled, // Prop para desabilitar interações no editor
}) => {
  return (
    <div
      style={style} // Aplica estilos gerais do bloco
      className={`py-16 text-center bg-gradient-to-br from-[#f9f4ef] to-[#fff7f3] ${isSelected ? 'outline-2 outline-blue-500 outline-offset-2' : ''}`}
    >
      <div className="max-w-2xl mx-auto space-y-6">
        <div className="w-20 h-20 bg-gradient-to-r from-[#B89B7A] to-[#A1835D] rounded-full flex items-center justify-center mx-auto animate-pulse">
          <Zap className="w-10 h-10 text-white" />
        </div>

        <h2 className="text-3xl font-bold text-[#432818]">
          {/* Edição inline para o título */}
          <InlineEditableText
            tag="h2"
            value={title || '🕐 Enquanto calculamos o seu resultado...'}
            onSave={onSaveInline('title')}
            className="inline-block"
          />
        </h2>

        <p className="text-lg text-[#6B5B73] leading-relaxed">
          {/* Edição inline para a mensagem principal */}
          <InlineEditableText
            isTextArea
            value={message || 'Queremos te fazer algumas perguntas que vão tornar sua experiência ainda mais completa.'}
            onSave={onSaveInline('message')}
            className="inline-block w-full"
          />
        </p>

        <div className="bg-white rounded-xl p-6 shadow-lg border border-[#B89B7A]/20">
          <p className="text-[#432818] font-medium">
            {/* Edição inline para a sub-mensagem */}
            <InlineEditableText
              isTextArea
              value={submessage || 'A ideia é simples: te ajudar a enxergar com mais clareza onde você está agora — e para onde pode ir com mais intenção, leveza e autenticidade.'}
              onSave={onSaveInline('submessage')}
              className="inline-block w-full"
            />
          </p>
        </div>

        {additionalMessage && (
          <p className="text-sm text-[#8F7A6A] italic">
            {/* Edição inline para a mensagem adicional */}
            <InlineEditableText
              tag="p"
              value={additionalMessage || '💬 Responda com sinceridade. Isso é só entre você e a sua nova versão.'}
              onSave={onSaveInline('additionalMessage')}
              className="inline-block"
            />
          </p>
        )}

        <div className="pt-4">
          <Button className="bg-[#B89B7A] hover:bg-[#A1835D] text-white px-8 py-3 rounded-full font-semibold transform hover:scale-105 transition-all" disabled={disabled}>
            Continuar Análise {/* Botão desabilitado no editor para evitar navegação */}
          </Button>
        </div>
      </div>
    </div>
  );
};


Parte 4:


// src/components/editor/blocks/StrategicQuestionBlock.tsx
import React from 'react';
import { Target } from 'lucide-react';
import { Button } from '@/components/ui/button'; // Ajuste o caminho relativo
import { InlineEditableText } from './InlineEditableText'; // Ajuste o caminho relativo

// Interface para cada opção estratégica
interface StrategicOption {
  id: string;
  text: string;
  value: string;
}

// Interface de props para o componente StrategicQuestionBlock
interface StrategicQuestionBlockProps {
  question?: string;
  subtitle?: string; // Subtítulo opcional
  options?: StrategicOption[];
  required?: boolean;
  onSaveInline: (key: string) => (newValue: string) => void; // Para edição inline do texto da pergunta/subtítulo
  isSelected?: boolean; // Indica se o bloco está selecionado no editor
  style?: React.CSSProperties; // Estilos gerais do bloco passados pelo editor
  disabled?: boolean; // Para desabilitar interações reais no editor
}

export const StrategicQuestionBlock: React.FC<StrategicQuestionBlockProps> = ({
  question,
  subtitle,
  options,
  required,
  onSaveInline,
  isSelected,
  style,
  disabled, // Prop para desabilitar interações no editor
}) => {
  // Opções padrão para visualização no editor se nenhuma for fornecida
  const defaultOptions: StrategicOption[] = [
    { id: 'a', text: 'Sim, definitivamente', value: 'high' },
    { id: 'b', text: 'Talvez, preciso saber mais', value: 'medium' },
    { id: 'c', text: 'Não, não me interessa', value: 'low' },
  ];
  const currentOptions = options && options.length > 0 ? options : defaultOptions;

  return (
    <div
      style={style} // Aplica estilos gerais do bloco
      className={`py-6 ${isSelected ? 'outline-2 outline-blue-500 outline-offset-2' : ''}`}
    >
      <div className="space-y-6 max-w-4xl mx-auto">
        <div className="text-center">
          <span className="inline-block bg-[#6B5B73] text-white px-4 py-2 rounded-full text-sm font-semibold mb-4">
            Pergunta Estratégica
          </span>
          <h3 className="text-xl md:text-2xl font-semibold text-[#432818] leading-relaxed">
            {/* Edição inline para o texto da pergunta */}
            <InlineEditableText
              tag="h3"
              value={question || 'Como você se vê hoje?'}
              onSave={onSaveInline('question')}
              className="inline-block w-full"
            />
          </h3>
          {subtitle && (
            <p className="text-center text-[#6B5B73] text-lg mt-4 italic">
              {/* Edição inline para o subtítulo */}
              <InlineEditableText
                tag="p"
                value={subtitle || 'Quando você se olha no espelho, como se sente com sua imagem pessoal atualmente?'}
                onSave={onSaveInline('subtitle')}
                className="inline-block"
              />
            </p>
          )}
        </div>

        <div className="space-y-3">
          {currentOptions.map((option) => (
            <Button
              key={option.id}
              variant="outline"
              className="w-full p-6 h-auto text-center border-2 border-[#6B5B73]/30 hover:border-[#6B5B73] hover:bg-[#6B5B73]/10 rounded-xl transition-all duration-200 text-base group"
              disabled={disabled} // Desabilita o botão no editor
              // onClick={disabled ? undefined : () => console.log('Opção estratégica selecionada:', option.value)}
            >
              {/* OBSERVAÇÃO: Texto da opção NÃO editável inline aqui.
                  A edição de itens de array é feita exclusivamente através do
                  painel de propriedades na sidebar direita usando o `array-editor`. */}
              <span className="text-[#432818] group-hover:text-[#6B5B73] font-medium">
                {option.text}
              </span>
            </Button>
          ))}
        </div>
        {required && (
          <p className="text-sm text-red-500 text-center">
            * Esta pergunta é obrigatória.
          </p>
        )}
      </div>
    </div>
  );
};


Parte 5:

// src/components/editor/blocks/QuizFinalTransitionBlock.tsx
import React from 'react';
import { Trophy, CheckCircle, RotateCcw } from 'lucide-react';
import { InlineEditableText } from './InlineEditableText'; // Ajuste o caminho relativo

// Interface de props para o componente QuizFinalTransitionBlock
interface QuizFinalTransitionBlockProps {
  title?: string;
  description?: string;
  showSteps?: boolean;
  waitMessage?: string;
  onSaveInline: (key: string) => (newValue: string) => void; // Para edição inline
  isSelected?: boolean; // Indica se o bloco está selecionado no editor
  style?: React.CSSProperties; // Estilos gerais do bloco passados pelo editor
  disabled?: boolean; // Para desabilitar interações reais no editor (não aplicável aqui, mas boa prática)
}

export const QuizFinalTransitionBlock: React.FC<QuizFinalTransitionBlockProps> = ({
  title,
  description,
  showSteps,
  waitMessage,
  onSaveInline,
  isSelected,
  style,
}) => {
  return (
    <div
      style={style} // Aplica estilos gerais do bloco
      className={`py-20 text-center bg-gradient-to-br from-[#432818] to-[#6B4F43] text-white ${isSelected ? 'outline-2 outline-blue-500 outline-offset-2' : ''}`}
    >
      <div className="max-w-2xl mx-auto space-y-8">
        <div className="relative">
          <div className="w-24 h-24 bg-gradient-to-r from-[#B89B7A] to-[#A1835D] rounded-full flex items-center justify-center mx-auto animate-spin">
            <Trophy className="w-12 h-12 text-white" />
          </div>
          <div className="absolute inset-0 w-24 h-24 border-4 border-white/30 rounded-full mx-auto animate-ping"></div>
        </div>

        <h2 className="text-4xl font-bold">
          {/* Edição inline para o título */}
          <InlineEditableText
            tag="h2"
            value={title || 'Analisando Seu Perfil Completo...'}
            onSave={onSaveInline('title')}
            className="inline-block"
            style={{ color: 'white' }} // Garante a cor do texto no editor
          />
        </h2>

        <p className="text-xl text-white/90 leading-relaxed">
          {/* Edição inline para a descrição */}
          <InlineEditableText
            isTextArea
            value={description || 'Estamos processando suas respostas e criando sua análise personalizada de estilo.'}
            onSave={onSaveInline('description')}
            className="inline-block w-full"
            style={{ color: 'rgba(255,255,255,0.9)' }} // Garante a cor do texto no editor
          />
        </p>

        {showSteps && (
          <div className="space-y-4 max-w-md mx-auto">
            {/* OBSERVAÇÃO: As etapas de progresso são fixas ou editadas via JSON-editor no painel de propriedades. */}
            <div className="flex items-center text-left space-x-3 bg-white/10 rounded-lg p-3">
              <CheckCircle className="w-5 h-5 text-green-400" />
              <span>Analisando suas preferências</span>
            </div>
            <div className="flex items-center text-left space-x-3 bg-white/10 rounded-lg p-3">
              <CheckCircle className="w-5 h-5 text-green-400" />
              <span>Calculando seu estilo predominante</span>
            </div>
            <div className="flex items-center text-left space-x-3 bg-white/20 rounded-lg p-3">
              <RotateCcw className="w-5 h-5 text-white animate-spin" />
              <span>Preparando suas recomendações</span>
            </div>
          </div>
        )}

        <div className="text-sm text-white/70">
          {/* Edição inline para a mensagem de espera */}
          <InlineEditableText
            tag="p"
            value={waitMessage || 'Isso levará apenas alguns segundos...'}
            onSave={onSaveInline('waitMessage')}
            className="inline-block"
            style={{ color: 'rgba(255,255,255,0.7)' }} // Garante a cor do texto no editor
          />
        </div>

        {/* Simular progresso */}
        <div className="w-full max-w-md mx-auto">
          <div className="bg-white/20 rounded-full h-2">
            <div className="bg-gradient-to-r from-[#B89B7A] to-[#A1835D] h-2 rounded-full animate-pulse" style={{ width: '87%' }}></div>
          </div>
          <div className="text-sm text-white/80 mt-2">87% concluído</div>
        </div>
      </div>
    </div>
  );
};

Parte 6:

// src/components/editor/blocks/ResultPageBlock.tsx
import React from 'react';
// Importe os componentes reais da sua ResultPage (ajuste os caminhos relativos)
// OBSERVAÇÃO: Para que estes componentes sejam editáveis inline no editor,
// eles precisam ser adaptados para aceitar a prop `onSaveInline` e usar `InlineEditableText` internamente.
// Se eles não forem adaptados, a edição será feita apenas no painel de propriedades via JSON-editor ou campos diretos.
import { Header } from '@/components/result/Header';
import SecondaryStylesSection from '@/components/quiz-result/SecondaryStylesSection';
import BeforeAfterTransformation from '@/components/result/BeforeAfterTransformation';
import MotivationSection from '@/components/result/MotivationSection';
import BonusSection from '@/components/result/BonusSection';
import Testimonials from '@/components/quiz-result/sales/Testimonials';
import SecurePurchaseElement from '@/components/result/SecurePurchaseElement';
import GuaranteeSection from '@/components/result/GuaranteeSection';
import MentorSection from '@/components/result/MentorSection';
import { Button } from '@/components/ui/button'; // Ajuste o caminho relativo
import { ShoppingCart, Lock, ArrowDown } from 'lucide-react'; // Ícones

import { InlineEditableText } from './InlineEditableText'; // Ajuste o caminho relativo

// Tipos para os itens do Value Stack
interface ValueStackItem {
  name: string;
  price: string;
}

// Tipos para os estilos secundários
interface SecondaryStyleItem {
  name: string;
  percentage: number;
}

// Interface de props para o componente ResultPageBlock
interface ResultPageBlockProps {
  // Props para o Header (mockadas para o editor)
  userName?: string;
  primaryStyle?: string;
  // Props para o Result Style Card (mockadas para o editor)
  percentage?: number;
  resultStyleDescription?: string; // Adicionada para edição inline da descrição do estilo
  // Props para SecondaryStylesSection (mockadas para o editor)
  secondaryStyles?: SecondaryStyleItem[];
  // Props para controlar visibilidade de seções (do schema)
  showBeforeAfter?: boolean;
  showMotivation?: boolean;
  showBonus?: boolean;
  showTestimonials?: boolean;
  showSecurePurchase?: boolean;
  showGuarantee?: boolean;
  showMentor?: boolean;
  // Props para Value Stack Section (do schema)
  valueStackTitle?: string;
  valueStackItems?: ValueStackItem[];
  valueStackTotalPrice?: string;
  valueStackFinalPrice?: string;
  ctaText?: string;
  ctaSubtitle?: string;
  // Propriedades de estilo para o bloco wrapper
  onSaveInline: (key: string) => (newValue: string) => void; // Para edição inline
  isSelected?: boolean; // Indica se o bloco está selecionado no editor
  style?: React.CSSProperties; // Estilos gerais do bloco passados pelo editor
}

export const ResultPageBlock: React.FC<ResultPageBlockProps> = ({
  userName,
  primaryStyle,
  percentage,
  secondaryStyles,
  showBeforeAfter = true,
  showMotivation = true,
  showBonus = true,
  showTestimonials = true,
  showSecurePurchase = true,
  showGuarantee = true,
  showMentor = true,
  valueStackTitle,
  valueStackItems,
  valueStackTotalPrice,
  valueStackFinalPrice,
  ctaText,
  ctaSubtitle,
  onSaveInline,
  isSelected,
  style,
}) => {
  // Mock data para os componentes reais, se as props não forem fornecidas
  // OBSERVAÇÃO: Estes mocks são para a visualização no editor.
  // Na sua aplicação real, esses dados viriam do resultado do quiz ou de uma API.
  const mockUserName = userName || 'Usuário Teste';
  const mockPrimaryStyle = primaryStyle || 'Elegante Clássica';
  const mockPercentage = percentage || 92;
  const mockSecondaryStyles = secondaryStyles || [
    { name: 'Natural Despojada', percentage: 78 },
    { name: 'Contemporânea Casual', percentage: 65 }
  ];

  const mockValueStackItems = valueStackItems || [
    { name: 'Guia Principal', price: 'R$ 67,00' },
    { name: 'Bônus - Peças-chave', price: 'R$ 79,00' },
    { name: 'Bônus - Visagismo Facial', price: 'R$ 29,00' }
  ];

  return (
    <div style={style} className={`bg-[#fffaf7] ${isSelected ? 'outline-2 outline-blue-500 outline-offset-2' : ''}`}>
      {/* OBSERVAÇÃO: Este é um wrapper para a sua ResultPage.tsx real.
          As props passadas para os componentes reais (Header, SecondaryStylesSection, etc.)
          devem corresponder às interfaces desses componentes.
          A edição inline para esses sub-componentes deve ser implementada dentro deles
          se você quiser que sejam editáveis diretamente no canvas. */}

      {/* 1. Header Real da ResultPage */}
      <Header
        userName={mockUserName}
        primaryStyle={mockPrimaryStyle}
      />

      {/* 2. Card do Estilo Predominante (simulação com InlineEditableText para o editor) */}
      <div className="p-4 md:p-6 bg-white shadow-md border border-[#B89B7A]/20">
        <div className="text-center mb-6 md:mb-8">
          <div className="max-w-md mx-auto mb-4 md:mb-6">
            <div className="flex justify-between items-center mb-2">
              <span className="text-xs md:text-sm text-[#8F7A6A]">Seu estilo predominante</span>
              <span className="text-[#aa6b5d] font-medium text-sm md:text-base">
                {mockPercentage}%
              </span>
            </div>
            <div className="w-full h-3 bg-[#F3E8E6] rounded-full overflow-hidden">
              <div
                className="h-full bg-gradient-to-r from-[#B89B7A] to-[#aa6b5d]"
                style={{ width: `${mockPercentage}%` }}
              ></div>
            </div>
          </div>
        </div>
        <div className="grid md:grid-cols-2 gap-6 md:gap-8 items-center">
          <div className="space-y-4 order-2 md:order-1">
            <h2 className="text-2xl md:text-3xl font-bold text-[#432818] mb-4">
              {/* Edição inline para o nome do estilo principal */}
              <InlineEditableText
                tag="h2"
                value={mockPrimaryStyle}
                onSave={onSaveInline('primaryStyle')}
                className="inline-block"
              />
            </h2>
            <p className="text-[#432818] leading-relaxed text-base md:text-lg">
              {/* Edição inline para a descrição do estilo */}
              <InlineEditableText
                isTextArea
                value={resultStyleDescription || 'Sua personalidade refletida no seu estilo de vestir. Aqui está como aplicar na prática.'}
                onSave={onSaveInline('resultStyleDescription')}
                className="inline-block w-full"
              />
            </p>
            {/* Seção de estilos complementares integrada (mocked) */}
            {/* OBSERVAÇÃO: Itens de estilos secundários são editados via array-editor no painel de propriedades. */}
            <div className="bg-white rounded-lg p-3 md:p-4 shadow-sm border border-[#B89B7A]/10 mt-4 md:mt-6">
              <h3 className="text-base md:text-lg font-medium text-[#432818] mb-3">
                Estilos que Também Influenciam Você
              </h3>
              <div className="space-y-3">
                {mockSecondaryStyles.slice(0, 2).map((style: any, index: number) => (
                  <div key={index} className="space-y-1">
                    <div className="flex justify-between items-center">
                      <span className="text-sm font-medium text-[#432818]">
                        {style.name}
                      </span>
                      <span className="text-[#B89B7A] font-semibold text-sm">
                        {style.percentage}%
                      </span>
                    </div>
                    <div className="w-full h-2 bg-gray-200 rounded-full overflow-hidden">
                      <div
                        className="h-full bg-gradient-to-r from-[#B89B7A] to-[#A1835D]"
                        style={{ width: `${style.percentage}%` }}
                      ></div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
          <div className="max-w-[250px] md:max-w-[280px] mx-auto relative order-1 md:order-2">
            <img
              src={'https://res.cloudinary.com/dqljyf76t/image/upload/v1744735317/15_xezvcy.webp'} // Mocked image
              alt={`Estilo ${mockPrimaryStyle}`}
              className="w-full h-auto rounded-lg shadow-md hover:scale-105 transition-transform duration-300"
              onError={(e) => { (e.currentTarget.src = 'https://placehold.co/250x280/cccccc/333333?text=Estilo'); }}
            />
          </div>
        </div>
      </div>

      {/* Outras seções da ResultPage, renderizadas condicionalmente */}
      {/* OBSERVAÇÃO: A visibilidade dessas seções é controlada pelas props `show...`
          definidas no schema `result-page-wrapper`. */}
      {showSecondaryStyles && <SecondaryStylesSection secondaryStyles={mockSecondaryStyles} />}
      {showBeforeAfter && <BeforeAfterTransformation />}
      {showMotivation && <MotivationSection />}
      {showBonus && <BonusSection />}
      {showTestimonials && <Testimonials />}
      {showSecurePurchase && <SecurePurchaseElement />}
      {showGuarantee && <GuaranteeSection />}
      {showMentor && <MentorSection />}

      {/* Value Stack Section (editável) */}
      <div className="py-8">
        <div className="max-w-4xl mx-auto">
          <h3 className="text-3xl font-bold text-[#432818] text-center mb-8">
            {/* Edição inline para o título do Value Stack */}
            <InlineEditableText
              tag="h3"
              value={valueStackTitle || 'O Que Você Recebe Hoje'}
              onSave={onSaveInline('valueStackTitle')}
              className="inline-block"
            />
          </h3>
          <div className="grid md:grid-cols-3 gap-6 mb-8">
            {/* OBSERVAÇÃO: Itens do Value Stack são editados via JSON-editor no painel de propriedades. */}
            {(mockValueStackItems || []).map((item, index) => (
              <div key={index} className="bg-white rounded-xl shadow-lg p-6 border border-[#B89B7A]/20">
                <h4 className="text-lg font-semibold text-[#432818] mb-2">{item.name}</h4>
                <div className="text-xl font-bold text-[#B89B7A]">{item.price}</div>
              </div>
            ))}
          </div>
          <div className="text-center bg-gradient-to-r from-[#B89B7A] to-[#A1835D] text-white p-6 rounded-xl">
            <div className="text-2xl font-bold mb-2">Valor Total Individual</div>
            <div className="text-4xl font-bold mb-4">{valueStackTotalPrice || 'R$ 1.691,00'}</div>
            <div className="text-lg opacity-90">Mas hoje você leva tudo por apenas:</div>
            <div className="text-5xl font-bold text-yellow-300 mt-2">{valueStackFinalPrice || 'R$ 147,00'}</div>
          </div>
        </div>
      </div>

      {/* CTA Verde Principal (editável) */}
      <div className="py-6">
        <div className="text-center space-y-4">
          <div className="bg-[#f9f4ef] p-6 rounded-lg border border-[#B89B7A]/10 mb-6">
            <h3 className="text-xl font-medium text-center text-[#aa6b5d] mb-4">
              Descubra Como Aplicar Seu Estilo na Prática
            </h3>
            <div className="flex justify-center">
              <ArrowDown className="w-8 h-8 text-[#B89B7A] animate-bounce" />
            </div>
          </div>
          <Button
            className="text-white py-5 px-8 rounded-md shadow-md transition-colors mb-2"
            style={{
              background: "linear-gradient(to right, #4CAF50, #45a049)",
              boxShadow: "0 4px 14px rgba(76, 175, 80, 0.4)",
              fontSize: "1rem"
            }}
            disabled // Desabilitado no editor
          >
            <span className="flex items-center justify-center gap-2">
              <ShoppingCart className="w-4 h-4" />
              {/* Edição inline para o texto do CTA */}
              <InlineEditableText
                tag="span"
                value={ctaText || 'Garantir Meu Guia + Bônus Especiais'}
                onSave={onSaveInline('ctaText')}
                className="inline-block"
                style={{ color: 'white' }}
              />
            </span>
          </Button>
          <p className="text-sm text-[#aa6b5d] mt-2 flex items-center justify-center gap-1">
            <Lock className="w-3 h-3" />
            {/* Edição inline para o subtítulo do CTA */}
            <InlineEditableText
              tag="span"
              value={ctaSubtitle || 'Quero meu Guia de Estilo Agora'}
              onSave={onSaveInline('ctaSubtitle')}
              className="inline-block"
            />
          </p>
        </div>
      </div>
    </div>
  );
};


Parte 7: 

// src/components/editor/blocks/QuizOfferPageBlock.tsx
import React from 'react';
// Importe os componentes reais da sua QuizOfferPage se existirem
// OBSERVAÇÃO: Para que estes componentes sejam editáveis inline no editor,
// eles precisam ser adaptados para aceitar a prop `onSaveInline` e usar `InlineEditableText` internamente.
// Se eles não forem adaptados, a edição será feita apenas no painel de propriedades via JSON-editor ou campos diretos.
// Exemplo: import UrgencyBanner from '@/components/offer/UrgencyBanner';
// Exemplo: import OfferHeroSection from '@/components/offer/OfferHeroSection';
// ... e outros que compõem a QuizOfferPage

import { InlineEditableText } from './InlineEditableText'; // Ajuste o caminho relativo
import { Button } from '@/components/ui/button'; // Ajuste o caminho relativo
import { Lock, Shield, Zap, CheckCircle, Clock, Gift, MessageCircle, Award } from 'lucide-react'; // Ícones

// Tipos para os bônus da transformação
interface BonusItem {
  title: string;
  description: string;
  value: string;
  image: string;
}

// Tipos para FAQ
interface FaqItem {
  question: string;
  answer: string;
}

// Interface de props para o componente QuizOfferPageBlock
interface QuizOfferPageBlockProps {
  // Props para Urgency Banner
  urgencyBannerText?: string;
  // Props para Logo
  logoSrc?: string;
  logoAlt?: string;
  logoWidth?: string;
  // Props para Hero Section
  heroTitle?: string;
  heroSubtitle?: string;
  heroImage?: string;
  heroCtaText?: string;
  // Props para Problems Section
  problemsTitle?: string;
  problemsList?: string[]; // Lista de strings simples
  problemsInsight?: string;
  // Props para Solution Section
  solutionTitle?: string;
  solutionSubtitle?: string;
  solutionImage?: string;
  // Props para Countdown
  countdownTitle?: string;
  countdownHours?: number;
  countdownUrgencyText?: string;
  // Props para Transformation Section
  transformationTitle?: string;
  transformationSubtitle?: string;
  transformationMainGuideImage?: string;
  transformationBonuses?: BonusItem[]; // Array de objetos
  // Props para Pricing
  pricingOriginal?: string;
  pricingCurrent?: string;
  pricingDiscount?: string;
  pricingUrgency?: string;
  pricingCtaText?: string;
  // Props para Guarantee
  guaranteeTitle?: string;
  guaranteeDescription?: string;
  // Props para FAQ
  faqQuestions?: FaqItem[]; // Array de objetos

  onSaveInline: (key: string) => (newValue: string) => void; // Para edição inline
  isSelected?: boolean; // Indica se o bloco está selecionado no editor
  style?: React.CSSProperties; // Estilos gerais do bloco passados pelo editor
  disabled?: boolean; // Para desabilitar interações reais no editor
}

export const QuizOfferPageBlock: React.FC<QuizOfferPageBlockProps> = ({
  urgencyBannerText,
  logoSrc,
  logoAlt,
  logoWidth,
  heroTitle,
  heroSubtitle,
  heroImage,
  heroCtaText,
  problemsTitle,
  problemsList,
  problemsInsight,
  solutionTitle,
  solutionSubtitle,
  solutionImage,
  countdownTitle,
  countdownHours,
  countdownUrgencyText,
  transformationTitle,
  transformationSubtitle,
  transformationMainGuideImage,
  transformationBonuses,
  pricingOriginal,
  pricingCurrent,
  pricingDiscount,
  pricingUrgency,
  pricingCtaText,
  guaranteeTitle,
  guaranteeDescription,
  faqQuestions,
  onSaveInline,
  isSelected,
  style,
  disabled, // Prop para desabilitar interações no editor
}) => {

  // OBSERVAÇÃO: Estes mocks são para a visualização no editor.
  // Na sua aplicação real, esses dados viriam de uma fonte de dados ou API.
  const mockProblemsList = problemsList || [
    'Guarda-roupa cheio mas nunca tem o que vestir?',
    'Compra peças que nunca combinam com nada?',
    'Sente que "nada fica bom" em você?',
    'Gasta dinheiro em roupas que ficam no armário?'
  ];

  const mockTransformationBonuses = transformationBonuses || [
    {
      title: 'Bônus 1: Peças-Chave do Guarda-Roupa',
      description: 'Um manual completo para construir um armário funcional, versátil e alinhado com sua identidade.',
      value: 'R$ 79,00',
      image: 'https://res.cloudinary.com/dqljyf76t/image/upload/v1744911687/C%C3%B3pia_de_MOCKUPS_12_w8fwrn.webp'
    },
    {
      title: 'Bônus 2: Guia de Visagismo Facial',
      description: 'Descubra qual formato de rosto você tem e como escolher cortes, acessórios e maquiagem que harmonizam.',
      value: 'R$ 29,00',
      image: 'https://res.cloudinary.com/dqljyf76t/image/upload/v1745515076/C%C3%B3pia_de_MOCKUPS_10_-_Copia_bvoccn.webp'
    }
  ];

  const mockFaqQuestions = faqQuestions || [
    { question: 'É realmente possível descobrir meu estilo em 5 minutos?', answer: 'Sim! Nosso quiz foi desenvolvido com base em anos de experiência e metodologia científica. Em poucos minutos, você terá uma análise precisa do seu estilo predominante entre os 7 estilos universais.' },
    { question: 'O que acontece se eu não gostar do resultado?', answer: 'Oferecemos 7 dias de garantia total. Se não ficar satisfeita, devolvemos 100% do seu dinheiro sem perguntas. Sua satisfação é nossa prioridade.' },
    { question: 'Quanto tempo terei acesso aos materiais?', answer: 'O acesso é vitalício! Você poderá baixar todos os materiais e consultá-los sempre que precisar, sem prazo de expiração.' }
  ];


  return (
    <div style={style} className={`bg-[#FFFBF7] ${isSelected ? 'outline-2 outline-blue-500 outline-offset-2' : ''}`}>
      {/* OBSERVAÇÃO: Este é um wrapper para a sua QuizOfferPage.tsx real.
          As props passadas para os componentes reais devem corresponder às interfaces deles.
          A edição inline para esses sub-componentes deve ser implementada dentro deles
          se você quiser que sejam editáveis diretamente no canvas. */}

      {/* 1. Banner de Urgência (editável) */}
      <div
        className="text-center py-3 px-4 text-white font-semibold text-sm rounded-lg"
        style={{ backgroundColor: '#ff4444', color: '#ffffff' }} // Cores mockadas, idealmente viriam de props
      >
        <InlineEditableText
          tag="span"
          value={urgencyBannerText || '🔥 ÚLTIMAS HORAS: 77% OFF - Apenas R$ 39,90!'}
          onSave={onSaveInline('urgencyBannerText')}
          className="inline-block"
          style={{ color: 'white' }}
        />
      </div>

      {/* 2. Logo da marca (editável) */}
      <div className="py-4 text-center">
        <img
          src={logoSrc || 'https://res.cloudinary.com/dqljyf76t/image/upload/v1744911572/LOGO_DA_MARCA_GISELE_r14oz2.webp'}
          alt={logoAlt || 'Logo Gisele Galvão'}
          style={{ width: logoWidth || '200px' }}
          className="mx-auto"
          onError={(e) => { (e.currentTarget.src = 'https://placehold.co/200x80/cccccc/333333?text=Logo'); }}
        />
      </div>

      {/* 3. Título principal (editável) */}
      <div className="py-8 text-center space-y-6">
        <h1 className="text-3xl md:text-4xl font-bold text-[#432818]">
          <InlineEditableText
            tag="h1"
            value={heroTitle || 'Descubra Seu Estilo Predominante em 5 Minutos'}
            onSave={onSaveInline('heroTitle')}
            className="inline-block"
          />
        </h1>
        <p className="text-lg text-[#6B4F43] max-w-2xl mx-auto">
          <InlineEditableText
            isTextArea
            value={heroSubtitle || 'Tenha finalmente um guarda-roupa que funciona 100%, onde tudo combina e reflete sua personalidade'}
            onSave={onSaveInline('heroSubtitle')}
            className="inline-block w-full"
          />
        </p>
        {heroImage && (
          <div className="max-w-lg mx-auto">
            <img
              src={heroImage}
              alt="Hero"
              className="w-full rounded-lg shadow-lg"
              onError={(e) => { (e.currentTarget.src = 'https://placehold.co/600x400/cccccc/333333?text=Hero'); }}
            />
          </div>
        )}
        <Button
          className="bg-[#B89B7A] hover:bg-[#aa6b5d] text-white px-8 py-3 rounded-lg text-lg"
          disabled={disabled} // Desabilitado no editor
        >
          <span className="flex items-center justify-center gap-2">
            <ShoppingCart className="w-4 h-4" />
            <InlineEditableText
              tag="span"
              value={heroCtaText || 'Descobrir Meu Estilo Agora'}
              onSave={onSaveInline('heroCtaText')}
              className="inline-block"
              style={{ color: 'white' }}
            />
          </span>
        </Button>
      </div>

      {/* 4. Seção de Problemas (editável) */}
      <div className="py-8">
        <div className="max-w-2xl mx-auto">
          <h2 className="text-2xl font-bold text-center text-[#432818] mb-6">
            <InlineEditableText
              tag="h2"
              value={problemsTitle || 'Você se identifica com isso?'}
              onSave={onSaveInline('problemsTitle')}
              className="inline-block"
            />
          </h2>
          <div className="space-y-3">
            {/* OBSERVAÇÃO: Lista de problemas editada via JSON-editor no painel de propriedades. */}
            {(mockProblemsList).map((problem: string, index: number) => (
              <div key={index} className="flex items-start gap-3 p-3 bg-[#f9f4ef] rounded-lg">
                <span className="text-[#B89B7A] font-bold">•</span>
                <span>{problem}</span>
              </div>
            ))}
          </div>
          {problemsInsight && (
            <div className="mt-6 text-center p-4 bg-[#432818] text-white rounded-lg">
              <p className="font-medium">
                <InlineEditableText
                  tag="p"
                  value={problemsInsight}
                  onSave={onSaveInline('problemsInsight')}
                  className="inline-block"
                  style={{ color: 'white' }}
                />
              </p>
            </div>
          )}
        </div>
      </div>

      {/* 5. Seção da Solução (editável) */}
      <div className="py-8">
        <div className="text-center space-y-6">
          <h2 className="text-3xl font-bold text-[#432818]">
            <InlineEditableText
              tag="h2"
              value={solutionTitle || 'A Solução: Quiz de Estilo'}
              onSave={onSaveInline('solutionTitle')}
              className="inline-block"
            />
          </h2>
          <p className="text-lg text-[#6B4F43] max-w-2xl mx-auto">
            <InlineEditableText
              isTextArea
              value={solutionSubtitle || 'Método preciso para identificar seu estilo'}
              onSave={onSaveInline('solutionSubtitle')}
              className="inline-block w-full"
            />
          </p>
          {solutionImage && (
            <div className="max-w-md mx-auto">
              <img
                src={solutionImage}
                alt="Solução"
                className="w-full rounded-lg shadow-lg"
                onError={(e) => { (e.currentTarget.src = 'https://placehold.co/400x300/cccccc/333333?text=Solução'); }}
              />
            </div>
          )}
        </div>
      </div>

      {/* 6. Countdown Timer (editável) */}
      <div className="py-6">
        <div className="text-center bg-[#ff4444] text-white p-6 rounded-lg">
          <h3 className="text-xl font-bold mb-4">
            <InlineEditableText
              tag="h3"
              value={countdownTitle || 'OFERTA EXPIRA EM:'}
              onSave={onSaveInline('countdownTitle')}
              className="inline-block"
              style={{ color: 'white' }}
            />
          </h3>
          <div className="flex justify-center gap-4 text-2xl font-bold">
            <div className="bg-white text-[#ff4444] px-4 py-2 rounded">
              {countdownHours || 24}h
            </div>
            <div className="bg-white text-[#ff4444] px-4 py-2 rounded">00m</div>
            <div className="bg-white text-[#ff4444] px-4 py-2 rounded">00s</div>
          </div>
          {countdownUrgencyText && (
            <p className="mt-4 text-sm">
              <InlineEditableText
                tag="p"
                value={countdownUrgencyText}
                onSave={onSaveInline('countdownUrgencyText')}
                className="inline-block"
                style={{ color: 'white' }}
              />
            </p>
          )}
        </div>
      </div>

      {/* 7. Seção de Transformação (editável) */}
      <div className="py-8">
        <div className="space-y-8">
          <div className="text-center">
            <h2 className="text-3xl font-bold text-[#432818] mb-4">
              <InlineEditableText
                tag="h2"
                value={transformationTitle || 'Transformação Completa'}
                onSave={onSaveInline('transformationTitle')}
                className="inline-block"
              />
            </h2>
            <p className="text-lg text-[#6B4F43]">
              <InlineEditableText
                isTextArea
                value={transformationSubtitle || 'Tudo que você precisa para descobrir e aplicar seu estilo'}
                onSave={onSaveInline('transformationSubtitle')}
                className="inline-block w-full"
              />
            </p>
          </div>

          {transformationMainGuideImage && (
            <div className="text-center">
              <img
                src={transformationMainGuideImage}
                alt="Guia Principal"
                className="max-w-md mx-auto rounded-lg shadow-lg"
                onError={(e) => { (e.currentTarget.src = 'https://placehold.co/400x300/cccccc/333333?text=Guia'); }}
              />
            </div>
          )}

          <div className="grid md:grid-cols-2 gap-6">
            {/* OBSERVAÇÃO: Bônus da transformação editados via JSON-editor no painel de propriedades. */}
            {(mockTransformationBonuses).map((bonus: BonusItem, index: number) => (
              <div key={index} className="bg-white p-6 rounded-lg shadow-lg border border-[#B89B7A]/20">
                <div className="text-center space-y-4">
                  <h3 className="text-xl font-bold text-[#432818]">{bonus.title}</h3>
                  <p className="text-[#6B4F43]">{bonus.description}</p>
                  <p className="text-lg font-bold text-[#B89B7A]">{bonus.value}</p>
                  {bonus.image && (
                    <img
                      src={bonus.image}
                      alt={bonus.title}
                      className="w-full max-w-xs mx-auto rounded-lg"
                      onError={(e) => { (e.currentTarget.src = 'https://placehold.co/200x150/cccccc/333333?text=Bonus'); }}
                    />
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* 8. Seção de Preço (editável) */}
      <div className="py-8">
        <div className="max-w-md mx-auto bg-white p-6 rounded-lg shadow-lg border border-[#B89B7A]/20">
          <div className="text-center space-y-4">
            <div className="relative">
              <p className="text-2xl text-gray-500 line-through">
                {pricingOriginal || 'R$ 175,00'}
              </p>
              <span className="absolute -top-2 -right-2 bg-[#ff4444] text-white px-2 py-1 rounded text-sm">
                {pricingDiscount || '77% OFF'}
              </span>
            </div>
            <p className="text-4xl font-bold text-[#B89B7A]">
              {pricingCurrent || 'R$ 39,90'}
            </p>
            <p className="text-sm text-[#ff4444] font-medium">
              <InlineEditableText
                tag="p"
                value={pricingUrgency || 'Oferta por tempo limitado!'}
                onSave={onSaveInline('pricingUrgency')}
                className="inline-block"
                style={{ color: '#ff4444' }}
              />
            </p>
            <Button
              className="w-full bg-[#B89B7A] hover:bg-[#aa6b5d] text-white py-3 text-lg"
              disabled={disabled} // Desabilitado no editor
            >
              <span className="flex items-center justify-center gap-2">
                <ShoppingCart className="w-4 h-4" />
                <InlineEditableText
                  tag="span"
                  value={pricingCtaText || 'Quero Descobrir Meu Estilo!'}
                  onSave={onSaveInline('pricingCtaText')}
                  className="inline-block"
                  style={{ color: 'white' }}
                />
              </span>
            </Button>
          </div>
        </div>
      </div>

      {/* 9. Garantia (editável) */}
      <div className="py-6">
        <div className="max-w-2xl mx-auto text-center bg-[#f9f4ef] p-6 rounded-lg border border-[#B89B7A]/20">
          <div className="flex items-center justify-center mb-4">
            <Shield className="w-12 h-12 text-[#B89B7A]" />
          </div>
          <h3 className="text-xl font-bold text-[#432818] mb-3">
            <InlineEditableText
              tag="h3"
              value={guaranteeTitle || 'Garantia de 7 Dias'}
              onSave={onSaveInline('guaranteeTitle')}
              className="inline-block"
            />
          </h3>
          <p className="text-[#6B4F43]">
            <InlineEditableText
              isTextArea
              value={guaranteeDescription || 'Estou tão confiante de que estes materiais vão transformar sua relação com a sua imagem pessoal que ofereço uma garantia incondicional de 7 dias.'}
              onSave={onSaveInline('guaranteeDescription')}
              className="inline-block w-full"
            />
          </p>
        </div>
      </div>

      {/* 10. FAQ (editável) */}
      <div className="py-8">
        <div className="max-w-3xl mx-auto">
          <h2 className="text-2xl font-bold text-center text-[#432818] mb-8">
            Perguntas Frequentes
          </h2>
          <div className="space-y-4">
            {/* OBSERVAÇÃO: Perguntas do FAQ editadas via JSON-editor no painel de propriedades. */}
            {(mockFaqQuestions).map((faq: FaqItem, index: number) => (
              <div key={index} className="bg-white p-6 rounded-lg shadow-md border border-[#B89B7A]/20">
                <h3 className="font-bold text-[#432818] mb-2">{faq.question}</h3>
                <p className="text-[#6B4F43]">{faq.answer}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

Parte 8: Código Consilidado


// ====================================================================================================
// ARQUIVO CONSOLIDADO: Componentes de Visualização das Etapas do Funil
// Destino: src/components/editor/blocks/ (ou caminhos originais, conforme a organização do seu projeto)
//
// Este arquivo contém a implementação de todos os componentes de bloco que representam as etapas
// do seu funil no canvas do editor. Eles foram projetados para serem editáveis via o painel de
// propriedades dinâmico (usando os schemas em blockDefinitions.ts) e, para campos de texto
// diretos, via edição inline.
//
// OBSERVAÇÕES IMPORTANTES:
// 1. Edição Inline de Itens de Array: Para simplificar a complexidade, a edição de textos que
//    fazem parte de arrays (como as opções de um quiz, itens de lista, ou perguntas de FAQ)
//    NÃO é feita diretamente inline no canvas. Em vez disso, a edição desses itens é realizada
//    EXCLUSIVAMENTE através do painel de propriedades dinâmico (usando o `array-editor` ou `json-editor`).
// 2. Componentes Reais vs. Mocks: Para as páginas de Resultado e Oferta, estes são wrappers
//    que utilizam seus componentes reais (ex: Header, SecondaryStylesSection). Os dados passados
//    para esses componentes são MOCKS para a visualização no editor. Na sua aplicação real,
//    esses dados viriam do resultado do quiz ou de uma API.
// 3. Caminhos de Importação: Ajuste os caminhos de importação (`@/components/ui`, `./InlineEditableText`, etc.)
//    conforme a estrutura exata do seu projeto.
// ====================================================================================================


// ====================================================================================================
// IMPORTS GERAIS NECESSÁRIOS PARA TODOS OS COMPONENTES NESTE ARQUIVO
// ====================================================================================================
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button'; // Ajuste o caminho relativo
import { Input } from '@/components/ui/input';   // Ajuste o caminho relativo
import { Label } from '@/components/ui/label';   // Ajuste o caminho relativo

// Ícones Lucide React (importe todos os que são usados nos componentes abaixo)
import {
  Type, Image as ImageIcon, ArrowRight, CheckCircle, Target, Plus, RotateCcw, Trophy, Gift, MessageCircle, CreditCard, Clock, Users, Sparkles, Palette, AlignLeft, AlignCenter, AlignRight, Award, Shield, ShoppingCart, ArrowDown, Book, Mic, RectangleHorizontal, LoaderCircle, GalleryHorizontalEnd, ChartArea, AlignHorizontalDistributeEnd, Quote, TextCursorInput, Proportions, MessageCircleQuestion, Mail, Phone, Info, XCircle, DollarSign, SlidersHorizontal, LayoutDashboard
} from 'lucide-react';

// Componente de edição inline (caminho relativo ao src/components/editor/blocks/)
import { InlineEditableText } from './InlineEditableText';

// Componentes reais do seu aplicativo (ajuste os caminhos relativos)
// OBSERVAÇÃO: Estes são os componentes que você já tem em outras pastas do seu projeto.
// Eles são importados aqui para serem usados pelos wrappers (ResultPageBlock, QuizOfferPageBlock).
import { Header } from '@/components/result/Header';
import SecondaryStylesSection from '@/components/quiz-result/SecondaryStylesSection';
import BeforeAfterTransformation from '@/components/result/BeforeAfterTransformation';
import MotivationSection from '@/components/result/MotivationSection';
import BonusSection from '@/components/result/BonusSection';
import Testimonials from '@/components/quiz-result/sales/Testimonials';
import SecurePurchaseElement from '@/components/result/SecurePurchaseElement';
import GuaranteeSection from '@/components/result/GuaranteeSection';
import MentorSection from '@/components/result/MentorSection';
// import BuildInfo from '@/components/BuildInfo'; // Se usado em ResultPageBlock/QuizOfferPageBlock
// import FixedIntroImage from '@/components/ui/FixedIntroImage'; // Se usado em QuizIntroBlock ou outros


// ====================================================================================================
// 1. src/components/blocks/quiz/QuizIntroBlock.tsx
//    Componente da Etapa 1: Introdução do Quiz (Coleta do Nome)
// ====================================================================================================
// Este é o componente original do seu aplicativo, adaptado para ser editável no editor.

// Interface para as cores aninhadas, conforme definido em blockDefinitions.ts
interface QuizIntroBlockColors {
  primary: string;
  secondary: string;
  accent: string;
  background: string;
  text: string;
}

// Interface de props para o componente QuizIntroBlock
interface QuizIntroBlockProps {
  blockId: string; // ID do bloco, útil para o editor
  title?: string;
  subtitle?: string;
  logoUrl?: string;
  logoAlt?: string;
  introImageUrl?: string;
  introImageAlt?: string;
  namePlaceholder?: string;
  buttonTextEmpty?: string;
  buttonTextFilled?: string;
  privacyText?: string;
  footerText?: string;
  required?: boolean;
  maxLength?: number;
  maxWidth?: string; // Para controlar a largura máxima do conteúdo
  backgroundGradient?: string; // Para o fundo do bloco

  colors?: QuizIntroBlockColors; // Cores para estilização

  // Props adicionais para integração com o editor
  onSaveInline: (key: string) => (newValue: string) => void; // Handler para edição inline
  isSelected?: boolean; // Indica se o bloco está selecionado no editor
  style?: React.CSSProperties; // Estilos gerais do bloco passados pelo editor
  disabled?: boolean; // Para desabilitar interações reais no editor
}

export const QuizIntroBlock: React.FC<QuizIntroBlockProps> = ({
  blockId,
  title,
  subtitle,
  logoUrl,
  logoAlt,
  introImageUrl,
  introImageAlt,
  namePlaceholder,
  buttonTextEmpty,
  buttonTextFilled,
  privacyText,
  footerText,
  required,
  maxLength,
  maxWidth,
  backgroundGradient,
  colors,
  onSaveInline,
  isSelected,
  style,
  disabled, // Prop para desabilitar interações no editor
}) => {
  const [userNameInput, setUserNameInput] = useState('');
  const [isButtonDisabled, setIsButtonDisabled] = useState(true);

  // Lógica do componente real (mantida)
  useEffect(() => {
    if (required) {
      setIsButtonDisabled(userNameInput.trim().length === 0);
    } else {
      setIsButtonDisabled(false);
    }
  }, [userNameInput, required]);

  const handleStart = () => {
    if (required && userNameInput.trim().length === 0) {
      console.warn('Nome é obrigatório!'); // No editor, apenas um console.warn
      return;
    }
    console.log('Quiz iniciado para:', userNameInput);
    // Na aplicação real, aqui você navegaria para a próxima etapa
  };

  // Cores padrão ou as passadas via props
  const primaryColor = colors?.primary || '#B89B7A';
  const secondaryColor = colors?.secondary || '#432818';
  const accentColor = colors?.accent || '#6B4F43';
  const backgroundColor = colors?.background || '#ffffff';
  const textColor = colors?.text || '#432818';

  return (
    <div
      id={blockId} // Importante para o editor identificar o bloco
      className={`relative min-h-screen flex flex-col items-center justify-center p-4 md:p-8 overflow-hidden font-montserrat ${isSelected ? 'outline-2 outline-blue-500 outline-offset-2' : ''}`}
      style={{
        backgroundColor: backgroundColor,
        color: textColor,
        background: backgroundGradient || backgroundColor,
        ...style // Aplica estilos gerais do editor (margens, etc.)
      }}
    >
      {/*  */}
      {introImageUrl && (
        <img
          src={introImageUrl}
          alt={introImageAlt || 'Imagem de Introdução'}
          className="absolute inset-0 w-full h-full object-cover z-0 opacity-20"
          onError={(e) => { (e.currentTarget.src = 'https://placehold.co/1200x800/cccccc/333333?text=Intro+Image'); }}
        />
      )}

      <div
        className="relative z-10 w-full max-w-md bg-white/90 backdrop-blur-sm rounded-2xl shadow-xl p-6 md:p-8 text-center space-y-6 border border-gray-100"
        style={{ maxWidth: maxWidth || '38rem', color: textColor }}
      >
        {logoUrl && (
          // 
          <img
            src={logoUrl}
            alt={logoAlt || 'Logo'}
            className="mx-auto h-16 md:h-20 object-contain mb-4"
            onError={(e) => { (e.currentTarget.src = 'https://placehold.co/160x60/cccccc/333333?text=Logo'); }}
          />
        )}

        <h1 className="text-3xl md:text-4xl font-playfair font-bold leading-tight" style={{ color: secondaryColor }}>
          {/* Edição inline para o título. Suporta HTML interno para destaque de cor. */}
          <InlineEditableText
            tag="h1"
            value={title || '<span class="text-[#B89B7A]">Chega</span> de um guarda-roupa lotado...'}
            onSave={onSaveInline('title')}
            className="inline-block w-full"
            style={{ color: secondaryColor }} // Garante a cor do título no editor
          />
        </h1>

        <p className="text-base md:text-lg leading-relaxed" style={{ color: textColor }}>
          {/* Edição inline para o subtítulo */}
          <InlineEditableText
            isTextArea
            value={subtitle || 'Em poucos minutos, descubra seu Estilo Predominante — e aprenda a montar looks que realmente refletem sua essência, com praticidade e confiança.'}
            onSave={onSaveInline('subtitle')}
            className="inline-block w-full"
            style={{ color: textColor }}
          />
        </p>

        <div className="space-y-4">
          <div>
            <Label htmlFor="userName" className="sr-only">Nome</Label>
            <Input
              id="userName"
              type="text"
              placeholder={namePlaceholder || 'Digite seu nome aqui...'}
              value={userNameInput}
              onChange={(e) => setUserNameInput(e.target.value)}
              className="w-full p-3 border-2 rounded-xl focus:ring-2 focus:ring-offset-2"
              style={{
                borderColor: primaryColor,
                backgroundColor: 'white',
                color: textColor,
                '--tw-ring-color': primaryColor + '40', // Tailwind ring color
              } as React.CSSProperties}
              maxLength={maxLength}
              disabled={disabled} // Desabilita o input no editor
            />
          </div>
          <Button
            onClick={handleStart}
            disabled={isButtonDisabled || disabled} // Desabilita o botão no editor
            className="w-full py-3 md:py-4 rounded-full text-lg font-semibold transition-all transform hover:scale-105 shadow-lg"
            style={{ backgroundColor: primaryColor, color: 'white' }}
          >
            {isButtonDisabled ? (
              // Edição inline para o texto do botão quando desabilitado
              <InlineEditableText
                tag="span"
                value={buttonTextEmpty || 'Preencha seu nome primeiro'}
                onSave={onSaveInline('buttonTextEmpty')}
                className="inline-block"
                style={{ color: 'white' }}
              />
            ) : (
              // Edição inline para o texto do botão quando habilitado
              <InlineEditableText
                tag="span"
                value={buttonTextFilled || 'Quero Descobrir meu Estilo Agora!'}
                onSave={onSaveInline('buttonTextFilled')}
                className="inline-block"
                style={{ color: 'white' }}
              />
            )}
          </Button>
        </div>

        {privacyText && (
          <p className="text-xs text-gray-500" style={{ color: accentColor }}>
            {/* Edição inline para o texto de privacidade */}
            <InlineEditableText
              tag="p"
              value={privacyText}
              onSave={onSaveInline('privacyText')}
              className="inline-block"
              style={{ color: accentColor }}
            />
          </p>
        )}
      </div>

      {footerText && (
        <p className="relative z-10 text-xs mt-4 text-gray-400" style={{ color: accentColor }}>
          {/* Edição inline para o texto do rodapé */}
          <InlineEditableText
            tag="p"
            value={footerText}
            onSave={onSaveInline('footerText')}
            className="inline-block"
            style={{ color: accentColor }}
          />
        </p>
      )}
    </div>
  );
};


// ====================================================================================================
// 2. src/components/editor/blocks/QuestionMultipleBlock.tsx
//    Componente para as 10 Questões Principais do Quiz (Etapas 2-11)
// ====================================================================================================
import { Button } from '@/components/ui/button'; // Importe Button para as opções
import { CheckCircle } from 'lucide-react';

// Interface para cada opção de pergunta, conforme definido em blockDefinitions.ts
interface QuestionOption {
  id: string;
  text: string;
  value: string;
  imageUrl?: string;
}

// Interface de props para o componente QuestionMultipleBlock
interface QuestionMultipleBlockProps {
  question?: string;
  options?: QuestionOption[];
  required?: boolean;
  multipleSelection?: boolean;
  maxSelections?: number;
  // Props de layout (do schema)
  columns?: string; // '1', '2', '3', '4'
  direction?: 'vertical' | 'horizontal';
  contentLayout?: 'text-image' | 'text-only' | 'image-only';
  // Props de estilização (do schema)
  borderStyle?: 'none' | 'sm' | 'md' | 'lg';
  shadowStyle?: 'none' | 'sm' | 'md' | 'lg';
  spacing?: 'sm' | 'md' | 'lg';
  detailStyle?: 'none' | 'simple' | 'full';
  optionVisualStyle?: 'simple' | 'card';
  // Cores (do schema, via nestedPath colors.primary, etc.)
  primaryColor?: string;
  textColor?: string;
  borderColor?: string;

  // Props adicionais para integração com o editor
  onSaveInline: (key: string) => (newValue: string) => void; // Para edição inline do texto da pergunta
  isSelected?: boolean; // Indica se o bloco está selecionado no editor
  style?: React.CSSProperties; // Estilos gerais do bloco passados pelo editor
  disabled?: boolean; // Para desabilitar interações reais no editor
}

export const QuestionMultipleBlock: React.FC<QuestionMultipleBlockProps> = ({
  question,
  options,
  required,
  multipleSelection,
  maxSelections,
  // Layout
  columns,
  direction,
  contentLayout,
  // Estilização
  borderStyle,
  shadowStyle,
  spacing,
  detailStyle,
  optionVisualStyle,
  // Cores
  primaryColor,
  textColor,
  borderColor,
  onSaveInline,
  isSelected,
  style,
  disabled, // Prop para desabilitar interações no editor
}) => {
  // Opções padrão para visualização no editor se nenhuma for fornecida
  const defaultOptions: QuestionOption[] = [
    { id: 'a', text: 'Opção A', value: 'a' },
    { id: 'b', text: 'Opção B', value: 'b' },
    { id: 'c', text: 'Opção C', value: 'c' },
    { id: 'd', text: 'Opção D', value: 'd' },
  ];
  const currentOptions = options && options.length > 0 ? options : defaultOptions;

  // Funções helper para aplicar classes CSS com base nas props de estilo
  const getBorderClass = (style: string | undefined) => {
    switch (style) {
      case 'sm': return 'border-2 rounded-md';
      case 'md': return 'border-3 rounded-lg';
      case 'lg': return 'border-4 rounded-xl';
      default: return 'border'; // 'none' ou default
    }
  };

  const getShadowClass = (style: string | undefined) => {
    switch (style) {
      case 'sm': return 'shadow-sm';
      case 'md': return 'shadow-md';
      case 'lg': return 'shadow-lg';
      default: return ''; // 'none' ou default
    }
  };

  const getSpacingClass = (style: string | undefined) => {
    switch (style) {
      case 'sm': return 'gap-2';
      case 'md': return 'gap-4';
      case 'lg': return 'gap-6';
      default: return 'gap-4';
    }
  };

  // Lógica para determinar se há imagens nas opções e o layout
  const hasImagesInOptions = currentOptions.some(opt => opt.imageUrl && contentLayout !== 'text-only');
  const gridColsClass = columns ? `grid-cols-${columns}` : 'grid-cols-2';
  const isHorizontal = direction === 'horizontal';

  return (
    <div
      style={style} // Aplica estilos gerais do bloco (margens, padding, etc.)
      className={`py-6 ${isSelected ? 'outline-2 outline-blue-500 outline-offset-2' : ''}`}
    >
      <div className={`space-y-6 max-w-5xl mx-auto ${isHorizontal ? 'flex flex-row flex-wrap justify-center' : ''} ${getSpacingClass(spacing)}`}>
        <h3 className="text-xl md:text-2xl font-semibold text-[#432818] text-center leading-relaxed mb-8">
          {/* Edição inline para o texto da pergunta */}
          <InlineEditableText
            tag="h3"
            value={question || 'Qual é a sua pergunta?'}
            onSave={onSaveInline('question')}
            className="inline-block w-full"
          />
        </h3>

        <div className={`grid ${gridColsClass} ${getSpacingClass(spacing)} ${isHorizontal ? 'flex-1' : 'w-full'}`}>
          {currentOptions.map((option, index) => (
            <div
              key={option.id}
              className={`
                border-2
                ${getBorderClass(borderStyle)}
                ${getShadowClass(shadowStyle)}
                ${borderColor ? `border-[${borderColor}]` : 'border-[#B89B7A]/30'}
                hover:border-[#B89B7A] hover:bg-[#f9f4ef] hover:shadow-lg
                rounded-xl transition-all duration-300 cursor-pointer group overflow-hidden
                ${optionVisualStyle === 'card' ? 'p-4' : 'p-0'}
              `}
              style={{ borderColor: borderColor || '' }}
              // Desabilita cliques nas opções no editor
              onClick={disabled ? undefined : () => console.log('Opção selecionada:', option.value)}
            >
              {contentLayout !== 'text-only' && option.imageUrl && hasImagesInOptions ? (
                // Layout com imagem
                <>
                  <div className="aspect-[4/3] overflow-hidden relative bg-gray-100">
                    {/*  */}
                    <img
                      src={option.imageUrl}
                      alt={option.text}
                      className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                      onError={(e) => {
                        (e.currentTarget.src = 'https://placehold.co/600x400/cccccc/333333?text=Erro+Imagem');
                        (e.currentTarget.style.display = 'block'); // Garante que o placeholder seja visível
                      }}
                    />
                    {detailStyle === 'full' && ( // Exemplo de detalhe visual (círculo com letra)
                      <div className="absolute top-4 left-4 w-10 h-10 bg-[#B89B7A] text-white rounded-full flex items-center justify-center font-bold text-base group-hover:bg-[#A1835D] transition-colors shadow-lg" style={{ backgroundColor: primaryColor || '' }}>
                        {String.fromCharCode(65 + index)}
                      </div>
                    )}
                  </div>
                  {contentLayout !== 'image-only' && (
                    <div className="p-5">
                      {/* OBSERVAÇÃO: Texto da opção NÃO editável inline aqui.
                          A edição de itens de array (como o texto das opções) é feita
                          exclusivamente através do painel de propriedades na sidebar direita
                          usando o `array-editor` para manter a robustez e evitar complexidade
                          excessiva na edição inline de dados aninhados. */}
                      <span
                        className={`text-[#432818] group-hover:text-[#432818] text-base leading-relaxed font-medium block`}
                        style={{ color: textColor || '' }}
                        dangerouslySetInnerHTML={{ __html: option.text }} // Permite HTML como negrito
                      />
                    </div>
                  )}
                </>
              ) : (
                // Layout apenas texto
                <div className="p-6">
                  <div className="flex items-start gap-4">
                    {detailStyle !== 'none' && ( // Exemplo de detalhe visual (círculo com letra)
                      <span className={`font-bold ${primaryColor ? `text-[${primaryColor}]` : 'text-[#B89B7A]'} min-w-[40px] h-10 w-10 bg-[#B89B7A]/10 rounded-full flex items-center justify-center group-hover:bg-[#B89B7A] group-hover:text-white transition-all text-base`} style={{ backgroundColor: primaryColor ? `${primaryColor}1A` : '', color: primaryColor || '' }}>
                        {String.fromCharCode(65 + index)}
                      </span>
                    )}
                    {/* OBSERVAÇÃO: Texto da opção NÃO editável inline aqui.
                        A edição de itens de array (como o texto das opções) é feita
                        exclusivamente através do painel de propriedades na sidebar direita
                        usando o `array-editor` para manter a robustez e evitar complexidade
                        excessiva na edição inline de dados aninhados. */}
                    <span
                      className={`text-[#432818] group-hover:text-[#432818] text-base leading-relaxed font-medium flex-1`}
                      style={{ color: textColor || '' }}
                      dangerouslySetInnerHTML={{ __html: option.text }} // Permite HTML como negrito
                    />
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>

        {multipleSelection && (
          <div className="text-center">
            <div className={`inline-flex items-center gap-2 px-4 py-2 rounded-full text-sm font-medium`} style={{ backgroundColor: primaryColor ? `${primaryColor}1A` : '#B89B7A1A', color: primaryColor || '#6B5B73' }}>
              <CheckCircle className="w-4 h-4" />
              Selecione até {maxSelections || 3} opções
            </div>
          </div>
        )}
        {required && (
          <p className="text-sm text-red-500 text-center">
            * Esta pergunta é obrigatória.
          </p>
        )}
      </div>
    </div>
  );
};

// ====================================================================================================
// 3. src/components/editor/blocks/QuizTransitionMainBlock.tsx
//    Componente para a Etapa 12: Transição Principal do Quiz
// ====================================================================================================
import { Button } from '@/components/ui/button'; // Importe Button para o botão

// Interface de props para o componente QuizTransitionMainBlock
interface QuizTransitionMainBlockProps {
  title?: string;
  message?: string;
  submessage?: string;
  additionalMessage?: string;
  transitionDuration?: number; // Propriedade de lógica, não visual no editor
  onSaveInline: (key: string) => (newValue: string) => void; // Para edição inline
  isSelected?: boolean; // Indica se o bloco está selecionado no editor
  style?: React.CSSProperties; // Estilos gerais do bloco passados pelo editor
  disabled?: boolean; // Para desabilitar interações reais no editor
}

export const QuizTransitionMainBlock: React.FC<QuizTransitionMainBlockProps> = ({
  title,
  message,
  submessage,
  additionalMessage,
  onSaveInline,
  isSelected,
  style,
  disabled, // Prop para desabilitar interações no editor
}) => {
  return (
    <div
      style={style} // Aplica estilos gerais do bloco
      className={`py-16 text-center bg-gradient-to-br from-[#f9f4ef] to-[#fff7f3] ${isSelected ? 'outline-2 outline-blue-500 outline-offset-2' : ''}`}
    >
      <div className="max-w-2xl mx-auto space-y-6">
        <div className="w-20 h-20 bg-gradient-to-r from-[#B89B7A] to-[#A1835D] rounded-full flex items-center justify-center mx-auto animate-pulse">
          {/*  */}
          <Zap className="w-10 h-10 text-white" />
        </div>

        <h2 className="text-3xl font-bold text-[#432818]">
          {/* Edição inline para o título */}
          <InlineEditableText
            tag="h2"
            value={title || '🕐 Enquanto calculamos o seu resultado...'}
            onSave={onSaveInline('title')}
            className="inline-block"
          />
        </h2>

        <p className="text-lg text-[#6B5B73] leading-relaxed">
          {/* Edição inline para a mensagem principal */}
          <InlineEditableText
            isTextArea
            value={message || 'Queremos te fazer algumas perguntas que vão tornar sua experiência ainda mais completa.'}
            onSave={onSaveInline('message')}
            className="inline-block w-full"
          />
        </p>

        <div className="bg-white rounded-xl p-6 shadow-lg border border-[#B89B7A]/20">
          <p className="text-[#432818] font-medium">
            {/* Edição inline para a sub-mensagem */}
            <InlineEditableText
              isTextArea
              value={submessage || 'A ideia é simples: te ajudar a enxergar com mais clareza onde você está agora — e para onde pode ir com mais intenção, leveza e autenticidade.'}
              onSave={onSaveInline('submessage')}
              className="inline-block w-full"
            />
          </p>
        </div>

        {additionalMessage && (
          <p className="text-sm text-[#8F7A6A] italic">
            {/* Edição inline para a mensagem adicional */}
            <InlineEditableText
              tag="p"
              value={additionalMessage || '💬 Responda com sinceridade. Isso é só entre você e a sua nova versão.'}
              onSave={onSaveInline('additionalMessage')}
              className="inline-block"
            />
          </p>
        )}

        <div className="pt-4">
          <Button className="bg-[#B89B7A] hover:bg-[#A1835D] text-white px-8 py-3 rounded-full font-semibold transform hover:scale-105 transition-all" disabled={disabled}>
            Continuar Análise {/* Botão desabilitado no editor para evitar navegação */}
          </Button>
        </div>
      </div>
    </div>
  );
};

// ====================================================================================================
// 4. src/components/editor/blocks/StrategicQuestionBlock.tsx
//    Componente para as 6 Questões Estratégicas do Quiz (Etapas 13-18)
// ====================================================================================================
import { Target } from 'lucide-react';
// import { Button } from '@/components/ui/button'; // Já importado acima

// Interface para cada opção estratégica, conforme definido em blockDefinitions.ts
interface StrategicOption {
  id: string;
  text: string;
  value: string;
}

// Interface de props para o componente StrategicQuestionBlock
interface StrategicQuestionBlockProps {
  question?: string;
  subtitle?: string; // Subtítulo opcional
  options?: StrategicOption[];
  required?: boolean;
  onSaveInline: (key: string) => (newValue: string) => void; // Para edição inline do texto da pergunta/subtítulo
  isSelected?: boolean; // Indica se o bloco está selecionado no editor
  style?: React.CSSProperties; // Estilos gerais do bloco passados pelo editor
  disabled?: boolean; // Para desabilitar interações reais no editor
}

export const StrategicQuestionBlock: React.FC<StrategicQuestionBlockProps> = ({
  question,
  subtitle,
  options,
  required,
  onSaveInline,
  isSelected,
  style,
  disabled, // Prop para desabilitar interações no editor
}) => {
  // Opções padrão para visualização no editor se nenhuma for fornecida
  const defaultOptions: StrategicOption[] = [
    { id: 'a', text: 'Sim, definitivamente', value: 'high' },
    { id: 'b', text: 'Talvez, preciso saber mais', value: 'medium' },
    { id: 'c', text: 'Não, não me interessa', value: 'low' },
  ];
  const currentOptions = options && options.length > 0 ? options : defaultOptions;

  return (
    <div
      style={style} // Aplica estilos gerais do bloco
      className={`py-6 ${isSelected ? 'outline-2 outline-blue-500 outline-offset-2' : ''}`}
    >
      <div className="space-y-6 max-w-4xl mx-auto">
        <div className="text-center">
          <span className="inline-block bg-[#6B5B73] text-white px-4 py-2 rounded-full text-sm font-semibold mb-4">
            Pergunta Estratégica
          </span>
          <h3 className="text-xl md:text-2xl font-semibold text-[#432818] leading-relaxed">
            {/* Edição inline para o texto da pergunta */}
            <InlineEditableText
              tag="h3"
              value={question || 'Como você se vê hoje?'}
              onSave={onSaveInline('question')}
              className="inline-block w-full"
            />
          </h3>
          {subtitle && (
            <p className="text-center text-[#6B5B73] text-lg mt-4 italic">
              {/* Edição inline para o subtítulo */}
              <InlineEditableText
                tag="p"
                value={subtitle || 'Quando você se olha no espelho, como se sente com sua imagem pessoal atualmente?'}
                onSave={onSaveInline('subtitle')}
                className="inline-block"
              />
            </p>
          )}
        </div>

        <div className="space-y-3">
          {currentOptions.map((option) => (
            <Button
              key={option.id}
              variant="outline"
              className="w-full p-6 h-auto text-center border-2 border-[#6B5B73]/30 hover:border-[#6B5B73] hover:bg-[#6B5B73]/10 rounded-xl transition-all duration-200 text-base group"
              disabled={disabled} // Desabilita o botão no editor
              // onClick={disabled ? undefined : () => console.log('Opção estratégica selecionada:', option.value)}
            >
              {/* OBSERVAÇÃO: Texto da opção NÃO editável inline aqui.
                  A edição de itens de array é feita exclusivamente através do
                  painel de propriedades na sidebar direita usando o `array-editor`. */}
              <span className="text-[#432818] group-hover:text-[#6B5B73] font-medium">
                {option.text}
              </span>
            </Button>
          ))}
        </div>
        {required && (
          <p className="text-sm text-red-500 text-center">
            * Esta pergunta é obrigatória.
          </p>
        )}
      </div>
    </div>
  );
};

// ====================================================================================================
// 5. src/components/editor/blocks/QuizFinalTransitionBlock.tsx
//    Componente para a Etapa 19: Transição Final do Quiz
// ====================================================================================================
import { Trophy, CheckCircle, RotateCcw } from 'lucide-react';
// import { InlineEditableText } from './InlineEditableText'; // Já importado acima

// Interface de props para o componente QuizFinalTransitionBlock
interface QuizFinalTransitionBlockProps {
  title?: string;
  description?: string;
  showSteps?: boolean;
  waitMessage?: string;
  onSaveInline: (key: string) => (newValue: string) => void; // Para edição inline
  isSelected?: boolean; // Indica se o bloco está selecionado no editor
  style?: React.CSSProperties; // Estilos gerais do bloco passados pelo editor
  disabled?: boolean; // Para desabilitar interações reais no editor (não aplicável aqui, mas boa prática)
}

export const QuizFinalTransitionBlock: React.FC<QuizFinalTransitionBlockProps> = ({
  title,
  description,
  showSteps,
  waitMessage,
  onSaveInline,
  isSelected,
  style,
}) => {
  return (
    <div
      style={style} // Aplica estilos gerais do bloco
      className={`py-20 text-center bg-gradient-to-br from-[#432818] to-[#6B4F43] text-white ${isSelected ? 'outline-2 outline-blue-500 outline-offset-2' : ''}`}
    >
      <div className="max-w-2xl mx-auto space-y-8">
        <div className="relative">
          <div className="w-24 h-24 bg-gradient-to-r from-[#B89B7A] to-[#A1835D] rounded-full flex items-center justify-center mx-auto animate-spin">
            {/*  */}
            <Trophy className="w-12 h-12 text-white" />
          </div>
          <div className="absolute inset-0 w-24 h-24 border-4 border-white/30 rounded-full mx-auto animate-ping"></div>
        </div>

        <h2 className="text-4xl font-bold">
          {/* Edição inline para o título */}
          <InlineEditableText
            tag="h2"
            value={title || 'Analisando Seu Perfil Completo...'}
            onSave={onSaveInline('title')}
            className="inline-block"
            style={{ color: 'white' }} // Garante a cor do texto no editor
          />
        </h2>

        <p className="text-xl text-white/90 leading-relaxed">
          {/* Edição inline para a descrição */}
          <InlineEditableText
            isTextArea
            value={description || 'Estamos processando suas respostas e criando sua análise personalizada de estilo.'}
            onSave={onSaveInline('description')}
            className="inline-block w-full"
            style={{ color: 'rgba(255,255,255,0.9)' }} // Garante a cor do texto no editor
          />
        </p>

        {showSteps && (
          <div className="space-y-4 max-w-md mx-auto">
            {/* OBSERVAÇÃO: As etapas de progresso são fixas ou editadas via JSON-editor no painel de propriedades. */}
            <div className="flex items-center text-left space-x-3 bg-white/10 rounded-lg p-3">
              <CheckCircle className="w-5 h-5 text-green-400" />
              <span>Analisando suas preferências</span>
            </div>
            <div className="flex items-center text-left space-x-3 bg-white/10 rounded-lg p-3">
              <CheckCircle className="w-5 h-5 text-green-400" />
              <span>Calculando seu estilo predominante</span>
            </div>
            <div className="flex items-center text-left space-x-3 bg-white/20 rounded-lg p-3">
              <RotateCcw className="w-5 h-5 text-white animate-spin" />
              <span>Preparando suas recomendações</span>
            </div>
          </div>
        )}

        <div className="text-sm text-white/70">
          {/* Edição inline para a mensagem de espera */}
          <InlineEditableText
            tag="p"
            value={waitMessage || 'Isso levará apenas alguns segundos...'}
            onSave={onSaveInline('waitMessage')}
            className="inline-block"
            style={{ color: 'rgba(255,255,255,0.7)' }} // Garante a cor do texto no editor
          />
        </div>

        {/* Simular progresso */}
        <div className="w-full max-w-md mx-auto">
          <div className="bg-white/20 rounded-full h-2">
            <div className="bg-gradient-to-r from-[#B89B7A] to-[#A1835D] h-2 rounded-full animate-pulse" style={{ width: '87%' }}></div>
          </div>
          <div className="text-sm text-white/80 mt-2">87% concluído</div>
        </div>
      </div>
    </div>
  );
};

// ====================================================================================================
// 6. src/components/editor/blocks/ResultPageBlock.tsx
//    Wrapper para a Etapa 20: Página de Resultado (Teste A)
// ====================================================================================================
// Este componente atua como um wrapper para a sua ResultPage.tsx real,
// exibindo dados mockados para o editor e permitindo edição inline de campos chave.

// Importe os componentes reais da sua ResultPage (ajuste os caminhos relativos)
import { Header } from '@/components/result/Header';
import SecondaryStylesSection from '@/components/quiz-result/SecondaryStylesSection';
import BeforeAfterTransformation from '@/components/result/BeforeAfterTransformation';
import MotivationSection from '@/components/result/MotivationSection';
import BonusSection from '@/components/result/BonusSection';
import Testimonials from '@/components/quiz-result/sales/Testimonials';
import SecurePurchaseElement from '@/components/result/SecurePurchaseElement';
import GuaranteeSection from '@/components/result/GuaranteeSection';
import MentorSection from '@/components/result/MentorSection';
// import BuildInfo from '@/components/BuildInfo'; // Exemplo, se for usado
// import FixedIntroImage from '@/components/ui/FixedIntroImage'; // Exemplo, se for usado
import { Button } from '@/components/ui/button'; // Importe Button para o CTA
import { ShoppingCart, Lock, ArrowDown } from 'lucide-react'; // Ícones

// Tipos para os itens do Value Stack, conforme definido em blockDefinitions.ts
interface ValueStackItem {
  name: string;
  price: string;
}

// Tipos para os estilos secundários, conforme definido em blockDefinitions.ts
interface SecondaryStyleItem {
  name: string;
  percentage: number;
}

// Interface de props para o componente ResultPageBlock
interface ResultPageBlockProps {
  // Props para o Header (mockadas para o editor)
  userName?: string;
  primaryStyle?: string;
  // Props para o Result Style Card (mockadas para o editor)
  percentage?: number;
  resultStyleDescription?: string; // Adicionada para edição inline da descrição do estilo
  // Props para SecondaryStylesSection (mockadas para o editor)
  secondaryStyles?: SecondaryStyleItem[];
  // Props para controlar visibilidade de seções (do schema)
  showBeforeAfter?: boolean;
  showMotivation?: boolean;
  showBonus?: boolean;
  showTestimonials?: boolean;
  showSecurePurchase?: boolean;
  showGuarantee?: boolean;
  showMentor?: boolean;
  // Props para Value Stack Section (do schema)
  valueStackTitle?: string;
  valueStackItems?: ValueStackItem[];
  valueStackTotalPrice?: string;
  valueStackFinalPrice?: string;
  ctaText?: string;
  ctaSubtitle?: string;
  // Propriedades de estilo para o bloco wrapper
  onSaveInline: (key: string) => (newValue: string) => void; // Para edição inline
  isSelected?: boolean; // Indica se o bloco está selecionado no editor
  style?: React.CSSProperties; // Estilos gerais do bloco passados pelo editor
  disabled?: boolean; // Para desabilitar interações reais no editor
}

export const ResultPageBlock: React.FC<ResultPageBlockProps> = ({
  userName,
  primaryStyle,
  percentage,
  secondaryStyles,
  showBeforeAfter = true,
  showMotivation = true,
  showBonus = true,
  showTestimonials = true,
  showSecurePurchase = true,
  showGuarantee = true,
  showMentor = true,
  valueStackTitle,
  valueStackItems,
  valueStackTotalPrice,
  valueStackFinalPrice,
  ctaText,
  ctaSubtitle,
  onSaveInline,
  isSelected,
  style,
  disabled, // Prop para desabilitar interações no editor
}) => {
  // Mock data para os componentes reais, se as props não forem fornecidas
  // OBSERVAÇÃO: Estes mocks são para a visualização no editor.
  // Na sua aplicação real, esses dados viriam do resultado do quiz ou de uma API.
  const mockUserName = userName || 'Usuário Teste';
  const mockPrimaryStyle = primaryStyle || 'Elegante Clássica';
  const mockPercentage = percentage || 92;
  const mockSecondaryStyles = secondaryStyles || [
    { name: 'Natural Despojada', percentage: 78 },
    { name: 'Contemporânea Casual', percentage: 65 }
  ];

  const mockValueStackItems = valueStackItems || [
    { name: 'Guia Principal', price: 'R$ 67,00' },
    { name: 'Bônus - Peças-chave', price: 'R$ 79,00' },
    { name: 'Bônus - Visagismo Facial', price: 'R$ 29,00' }
  ];

  return (
    <div style={style} className={`bg-[#fffaf7] ${isSelected ? 'outline-2 outline-blue-500 outline-offset-2' : ''}`}>
      {/* OBSERVAÇÃO: Este é um wrapper para a sua ResultPage.tsx real.
          As props passadas para os componentes reais (Header, SecondaryStylesSection, etc.)
          devem corresponder às interfaces desses componentes.
          A edição inline para esses sub-componentes deve ser implementada dentro deles
          se você quiser que sejam editáveis diretamente no canvas. */}

      {/* 1. Header Real da ResultPage */}
      <Header
        userName={mockUserName}
        primaryStyle={mockPrimaryStyle}
      />

      {/* 2. Card do Estilo Predominante (simulação com InlineEditableText para o editor) */}
      <div className="p-4 md:p-6 bg-white shadow-md border border-[#B89B7A]/20">
        <div className="text-center mb-6 md:mb-8">
          <div className="max-w-md mx-auto mb-4 md:mb-6">
            <div className="flex justify-between items-center mb-2">
              <span className="text-xs md:text-sm text-[#8F7A6A]">Seu estilo predominante</span>
              <span className="text-[#aa6b5d] font-medium text-sm md:text-base">
                {mockPercentage}%
              </span>
            </div>
            <div className="w-full h-3 bg-[#F3E8E6] rounded-full overflow-hidden">
              <div
                className="h-full bg-gradient-to-r from-[#B89B7A] to-[#aa6b5d]"
                style={{ width: `${mockPercentage}%` }}
              ></div>
            </div>
          </div>
        </div>
        <div className="grid md:grid-cols-2 gap-6 md:gap-8 items-center">
          <div className="space-y-4 order-2 md:order-1">
            <h2 className="text-2xl md:text-3xl font-bold text-[#432818] mb-4">
              {/* Edição inline para o nome do estilo principal */}
              <InlineEditableText
                tag="h2"
                value={mockPrimaryStyle}
                onSave={onSaveInline('primaryStyle')}
                className="inline-block"
              />
            </h2>
            <p className="text-[#432818] leading-relaxed text-base md:text-lg">
              {/* Edição inline para a descrição do estilo */}
              <InlineEditableText
                isTextArea
                value={resultStyleDescription || 'Sua personalidade refletida no seu estilo de vestir. Aqui está como aplicar na prática.'}
                onSave={onSaveInline('resultStyleDescription')}
                className="inline-block w-full"
              />
            </p>
            {/* Seção de estilos complementares integrada (mocked) */}
            {/* OBSERVAÇÃO: Itens de estilos secundários são editados via array-editor no painel de propriedades. */}
            <div className="bg-white rounded-lg p-3 md:p-4 shadow-sm border border-[#B89B7A]/10 mt-4 md:mt-6">
              <h3 className="text-base md:text-lg font-medium text-[#432818] mb-3">
                Estilos que Também Influenciam Você
              </h3>
              <div className="space-y-3">
                {mockSecondaryStyles.slice(0, 2).map((style: any, index: number) => (
                  <div key={index} className="space-y-1">
                    <div className="flex justify-between items-center">
                      <span className="text-sm font-medium text-[#432818]">
                        {style.name}
                      </span>
                      <span className="text-[#B89B7A] font-semibold text-sm">
                        {style.percentage}%
                      </span>
                    </div>
                    <div className="w-full h-2 bg-gray-200 rounded-full overflow-hidden">
                      <div
                        className="h-full bg-gradient-to-r from-[#B89B7A] to-[#A1835D]"
                        style={{ width: `${style.percentage}%` }}
                      ></div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
          <div className="max-w-[250px] md:max-w-[280px] mx-auto relative order-1 md:order-2">
            {/*  */}
            <img
              src={'https://res.cloudinary.com/dqljyf76t/image/upload/v1744735317/15_xezvcy.webp'} // Mocked image
              alt={`Estilo ${mockPrimaryStyle}`}
              className="w-full h-auto rounded-lg shadow-md hover:scale-105 transition-transform duration-300"
              onError={(e) => { (e.currentTarget.src = 'https://placehold.co/250x280/cccccc/333333?text=Estilo'); }}
            />
          </div>
        </div>
      </div>

      {/* Outras seções da ResultPage, renderizadas condicionalmente */}
      {/* OBSERVAÇÃO: A visibilidade dessas seções é controlada pelas props `show...`
          definidas no schema `result-page-wrapper`. */}
      {showSecondaryStyles && <SecondaryStylesSection secondaryStyles={mockSecondaryStyles} />}
      {showBeforeAfter && <BeforeAfterTransformation />}
      {showMotivation && <MotivationSection />}
      {showBonus && <BonusSection />}
      {showTestimonials && <Testimonials />}
      {showSecurePurchase && <SecurePurchaseElement />}
      {showGuarantee && <GuaranteeSection />}
      {showMentor && <MentorSection />}

      {/* Value Stack Section (editável) */}
      <div className="py-8">
        <div className="max-w-4xl mx-auto">
          <h3 className="text-3xl font-bold text-[#432818] text-center mb-8">
            {/* Edição inline para o título do Value Stack */}
            <InlineEditableText
              tag="h3"
              value={valueStackTitle || 'O Que Você Recebe Hoje'}
              onSave={onSaveInline('valueStackTitle')}
              className="inline-block"
            />
          </h3>
          <div className="grid md:grid-cols-3 gap-6 mb-8">
            {/* OBSERVAÇÃO: Itens do Value Stack são editados via JSON-editor no painel de propriedades. */}
            {(mockValueStackItems || []).map((item, index) => (
              <div key={index} className="bg-white rounded-xl shadow-lg p-6 border border-[#B89B7A]/20">
                <h4 className="text-lg font-semibold text-[#432818] mb-2">{item.name}</h4>
                <div className="text-xl font-bold text-[#B89B7A]">{item.price}</div>
              </div>
            ))}
          </div>
          <div className="text-center bg-gradient-to-r from-[#B89B7A] to-[#A1835D] text-white p-6 rounded-xl">
            <div className="text-2xl font-bold mb-2">Valor Total Individual</div>
            <div className="text-4xl font-bold mb-4">{valueStackTotalPrice || 'R$ 1.691,00'}</div>
            <div className="text-lg opacity-90">Mas hoje você leva tudo por apenas:</div>
            <div className="text-5xl font-bold text-yellow-300 mt-2">{valueStackFinalPrice || 'R$ 147,00'}</div>
          </div>
        </div>
      </div>

      {/* CTA Verde Principal (editável) */}
      <div className="py-6">
        <div className="text-center space-y-4">
          <div className="bg-[#f9f4ef] p-6 rounded-lg border border-[#B89B7A]/10 mb-6">
            <h3 className="text-xl font-medium text-center text-[#aa6b5d] mb-4">
              Descubra Como Aplicar Seu Estilo na Prática
            </h3>
            <div className="flex justify-center">
              {/*  */}
              <ArrowDown className="w-8 h-8 text-[#B89B7A] animate-bounce" />
            </div>
          </div>
          <Button
            className="text-white py-5 px-8 rounded-md shadow-md transition-colors mb-2"
            style={{
              background: "linear-gradient(to right, #4CAF50, #45a049)",
              boxShadow: "0 4px 14px rgba(76, 175, 80, 0.4)",
              fontSize: "1rem"
            }}
            disabled={disabled} // Desabilitado no editor
          >
            <span className="flex items-center justify-center gap-2">
              {/*  */}
              <ShoppingCart className="w-4 h-4" />
              {/* Edição inline para o texto do CTA */}
              <InlineEditableText
                tag="span"
                value={ctaText || 'Garantir Meu Guia + Bônus Especiais'}
                onSave={onSaveInline('ctaText')}
                className="inline-block"
                style={{ color: 'white' }}
              />
            </span>
          </Button>
          <p className="text-sm text-[#aa6b5d] mt-2 flex items-center justify-center gap-1">
            {/*  */}
            <Lock className="w-3 h-3" />
            {/* Edição inline para o subtítulo do CTA */}
            <InlineEditableText
              tag="span"
              value={ctaSubtitle || 'Quero meu Guia de Estilo Agora'}
              onSave={onSaveInline('ctaSubtitle')}
              className="inline-block"
            />
          </p>
        </div>
      </div>
    </div>
  );
};

// ====================================================================================================
// 7. src/components/editor/blocks/QuizOfferPageBlock.tsx
//    Wrapper para a Etapa 21: Página de Oferta (Teste B)
// ====================================================================================================
// Este componente atua como um wrapper para a sua QuizOfferPage.tsx real,
// exibindo dados mockados para o editor e permitindo edição inline de campos chave.

// Importe os componentes reais da sua QuizOfferPage se existirem
// OBSERVAÇÃO: Para que estes componentes sejam editáveis inline no editor,
// eles precisam ser adaptados para aceitar a prop `onSaveInline` e usar `InlineEditableText` internamente.
// Se eles não forem adaptados, a edição será feita apenas no painel de propriedades via JSON-editor ou campos diretos.
// Exemplo: import UrgencyBanner from '@/components/offer/UrgencyBanner';
// Exemplo: import OfferHeroSection from '@/components/offer/OfferHeroSection';
// ... e outros que compõem a QuizOfferPage

// import { InlineEditableText } from './InlineEditableText'; // Já importado acima
// import { Button } from '@/components/ui/button'; // Já importado acima
// import { Lock, Shield, Zap, CheckCircle, Clock, Gift, MessageCircle, Award } from 'lucide-react'; // Já importado acima

// Tipos para os bônus da transformação, conforme definido em blockDefinitions.ts
interface BonusItem {
  title: string;
  description: string;
  value: string;
  image: string;
}

// Tipos para FAQ, conforme definido em blockDefinitions.ts
interface FaqItem {
  question: string;
  answer: string;
}

// Interface de props para o componente QuizOfferPageBlock
interface QuizOfferPageBlockProps {
  // Props para Urgency Banner
  urgencyBannerText?: string;
  // Props para Logo
  logoSrc?: string;
  logoAlt?: string;
  logoWidth?: string;
  // Props para Hero Section
  heroTitle?: string;
  heroSubtitle?: string;
  heroImage?: string;
  heroCtaText?: string;
  // Props para Problems Section
  problemsTitle?: string;
  problemsList?: string[]; // Lista de strings simples
  problemsInsight?: string;
  // Props para Solution Section
  solutionTitle?: string;
  solutionSubtitle?: string;
  solutionImage?: string;
  // Props para Countdown
  countdownTitle?: string;
  countdownHours?: number;
  countdownUrgencyText?: string;
  // Props para Transformation Section
  transformationTitle?: string;
  transformationSubtitle?: string;
  transformationMainGuideImage?: string;
  transformationBonuses?: BonusItem[]; // Array de objetos
  // Props para Pricing
  pricingOriginal?: string;
  pricingCurrent?: string;
  pricingDiscount?: string;
  pricingUrgency?: string;
  pricingCtaText?: string;
  // Props para Guarantee
  guaranteeTitle?: string;
  guaranteeDescription?: string;
  // Props para FAQ
  faqQuestions?: FaqItem[]; // Array de objetos

  // Props adicionais para integração com o editor
  onSaveInline: (key: string) => (newValue: string) => void; // Para edição inline
  isSelected?: boolean; // Indica se o bloco está selecionado no editor
  style?: React.CSSProperties; // Estilos gerais do bloco passados pelo editor
  disabled?: boolean; // Para desabilitar interações reais no editor
}

export const QuizOfferPageBlock: React.FC<QuizOfferPageBlockProps> = ({
  urgencyBannerText,
  logoSrc,
  logoAlt,
  logoWidth,
  heroTitle,
  heroSubtitle,
  heroImage,
  heroCtaText,
  problemsTitle,
  problemsList,
  problemsInsight,
  solutionTitle,
  solutionSubtitle,
  solutionImage,
  countdownTitle,
  countdownHours,
  countdownUrgencyText,
  transformationTitle,
  transformationSubtitle,
  transformationMainGuideImage,
  transformationBonuses,
  pricingOriginal,
  pricingCurrent,
  pricingDiscount,
  pricingUrgency,
  pricingCtaText,
  guaranteeTitle,
  guaranteeDescription,
  faqQuestions,
  onSaveInline,
  isSelected,
  style,
  disabled, // Prop para desabilitar interações no editor
}) => {

  // OBSERVAÇÃO: Estes mocks são para a visualização no editor.
  // Na sua aplicação real, esses dados viriam de uma fonte de dados ou API.
  const mockProblemsList = problemsList || [
    'Guarda-roupa cheio mas nunca tem o que vestir?',
    'Compra peças que nunca combinam com nada?',
    'Sente que "nada fica bom" em você?',
    'Gasta dinheiro em roupas que ficam no armário?'
  ];

  const mockTransformationBonuses = transformationBonuses || [
    {
      title: 'Bônus 1: Peças-Chave do Guarda-Roupa',
      description: 'Um manual completo para construir um armário funcional, versátil e alinhado com sua identidade.',
      value: 'R$ 79,00',
      image: 'https://res.cloudinary.com/dqljyf76t/image/upload/v1744911687/C%C3%B3pia_de_MOCKUPS_12_w8fwrn.webp'
    },
    {
      title: 'Bônus 2: Guia de Visagismo Facial',
      description: 'Descubra qual formato de rosto você tem e como escolher cortes, acessórios e maquiagem que harmonizam.',
      value: 'R$ 29,00',
      image: 'https://res.cloudinary.com/dqljyf76t/image/upload/v1745515076/C%C3%B3pia_de_MOCKUPS_10_-_Copia_bvoccn.webp'
    }
  ];

  const mockFaqQuestions = faqQuestions || [
    { question: 'É realmente possível descobrir meu estilo em 5 minutos?', answer: 'Sim! Nosso quiz foi desenvolvido com base em anos de experiência e metodologia científica. Em poucos minutos, você terá uma análise precisa do seu estilo predominante entre os 7 estilos universais.' },
    { question: 'O que acontece se eu não gostar do resultado?', answer: 'Oferecemos 7 dias de garantia total. Se não ficar satisfeita, devolvemos 100% do seu dinheiro sem perguntas. Sua satisfação é nossa prioridade.' },
    { question: 'Quanto tempo terei acesso aos materiais?', answer: 'O acesso é vitalício! Você poderá baixar todos os materiais e consultá-los sempre que precisar, sem prazo de expiração.' }
  ];


  return (
    <div style={style} className={`bg-[#FFFBF7] ${isSelected ? 'outline-2 outline-blue-500 outline-offset-2' : ''}`}>
      {/* OBSERVAÇÃO: Este é um wrapper para a sua QuizOfferPage.tsx real.
          As props passadas para os componentes reais devem corresponder às interfaces deles.
          A edição inline para esses sub-componentes deve ser implementada dentro deles
          se você quiser que sejam editáveis diretamente no canvas. */}

      {/* 1. Banner de Urgência (editável) */}
      <div
        className="text-center py-3 px-4 text-white font-semibold text-sm rounded-lg"
        style={{ backgroundColor: '#ff4444', color: '#ffffff' }} // Cores mockadas, idealmente viriam de props
      >
        <InlineEditableText
          tag="span"
          value={urgencyBannerText || '🔥 ÚLTIMAS HORAS: 77% OFF - Apenas R$ 39,90!'}
          onSave={onSaveInline('urgencyBannerText')}
          className="inline-block"
          style={{ color: 'white' }}
        />
      </div>

      {/* 2. Logo da marca (editável) */}
      <div className="py-4 text-center">
        {/*  */}
        <img
          src={logoSrc || 'https://res.cloudinary.com/dqljyf76t/image/upload/v1744911572/LOGO_DA_MARCA_GISELE_r14oz2.webp'}
          alt={logoAlt || 'Logo Gisele Galvão'}
          style={{ width: logoWidth || '200px' }}
          className="mx-auto"
          onError={(e) => { (e.currentTarget.src = 'https://placehold.co/200x80/cccccc/333333?text=Logo'); }}
        />
      </div>

      {/* 3. Título principal (editável) */}
      <div className="py-8 text-center space-y-6">
        <h1 className="text-3xl md:text-4xl font-bold text-[#432818]">
          <InlineEditableText
            tag="h1"
            value={heroTitle || 'Descubra Seu Estilo Predominante em 5 Minutos'}
            onSave={onSaveInline('heroTitle')}
            className="inline-block"
          />
        </h1>
        <p className="text-lg text-[#6B4F43] max-w-2xl mx-auto">
          <InlineEditableText
            isTextArea
            value={heroSubtitle || 'Tenha finalmente um guarda-roupa que funciona 100%, onde tudo combina e reflete sua personalidade'}
            onSave={onSaveInline('heroSubtitle')}
            className="inline-block w-full"
          />
        </p>
        {heroImage && (
          <div className="max-w-lg mx-auto">
            {/*  */}
            <img
              src={heroImage}
              alt="Hero"
              className="w-full rounded-lg shadow-lg"
              onError={(e) => { (e.currentTarget.src = 'https://placehold.co/600x400/cccccc/333333?text=Hero'); }}
            />
          </div>
        )}
        <Button
          className="bg-[#B89B7A] hover:bg-[#aa6b5d] text-white px-8 py-3 rounded-lg text-lg"
          disabled={disabled} // Desabilitado no editor
        >
          <span className="flex items-center justify-center gap-2">
            {/*  */}
            <ShoppingCart className="w-4 h-4" />
            <InlineEditableText
              tag="span"
              value={heroCtaText || 'Descobrir Meu Estilo Agora'}
              onSave={onSaveInline('heroCtaText')}
              className="inline-block"
              style={{ color: 'white' }}
            />
          </span>
        </Button>
      </div>

      {/* 4. Seção de Problemas (editável) */}
      <div className="py-8">
        <div className="max-w-2xl mx-auto">
          <h2 className="text-2xl font-bold text-center text-[#432818] mb-6">
            <InlineEditableText
              tag="h2"
              value={problemsTitle || 'Você se identifica com isso?'}
              onSave={onSaveInline('problemsTitle')}
              className="inline-block"
            />
          </h2>
          <div className="space-y-3">
            {/* OBSERVAÇÃO: Lista de problemas editada via JSON-editor no painel de propriedades. */}
            {(mockProblemsList).map((problem: string, index: number) => (
              <div key={index} className="flex items-start gap-3 p-3 bg-[#f9f4ef] rounded-lg">
                <span className="text-[#B89B7A] font-bold">•</span>
                <span>{problem}</span>
              </div>
            ))}
          </div>
          {problemsInsight && (
            <div className="mt-6 text-center p-4 bg-[#432818] text-white rounded-lg">
              <p className="font-medium">
                <InlineEditableText
                  tag="p"
                  value={problemsInsight}
                  onSave={onSaveInline('problemsInsight')}
                  className="inline-block"
                  style={{ color: 'white' }}
                />
              </p>
            </div>
          )}
        </div>
      </div>

      {/* 5. Seção da Solução (editável) */}
      <div className="py-8">
        <div className="text-center space-y-6">
          <h2 className="text-3xl font-bold text-[#432818]">
            <InlineEditableText
              tag="h2"
              value={solutionTitle || 'A Solução: Quiz de Estilo'}
              onSave={onSaveInline('solutionTitle')}
              className="inline-block"
            />
          </h2>
          <p className="text-lg text-[#6B4F43] max-w-2xl mx-auto">
            <InlineEditableText
              isTextArea
              value={solutionSubtitle || 'Método preciso para identificar seu estilo'}
              onSave={onSaveInline('solutionSubtitle')}
              className="inline-block w-full"
            />
          </p>
          {solutionImage && (
            <div className="max-w-md mx-auto">
              {/*  */}
              <img
                src={solutionImage}
                alt="Solução"
                className="w-full rounded-lg shadow-lg"
                onError={(e) => { (e.currentTarget.src = 'https://placehold.co/400x300/cccccc/333333?text=Solução'); }}
              />
            </div>
          )}
        </div>
      </div>

      {/* 6. Countdown Timer (editável) */}
      <div className="py-6">
        <div className="text-center bg-[#ff4444] text-white p-6 rounded-lg">
          <h3 className="text-xl font-bold mb-4">
            <InlineEditableText
              tag="h3"
              value={countdownTitle || 'OFERTA EXPIRA EM:'}
              onSave={onSaveInline('countdownTitle')}
              className="inline-block"
              style={{ color: 'white' }}
            />
          </h3>
          <div className="flex justify-center gap-4 text-2xl font-bold">
            <div className="bg-white text-[#ff4444] px-4 py-2 rounded">
              {countdownHours || 24}h
            </div>
            <div className="bg-white text-[#ff4444] px-4 py-2 rounded">00m</div>
            <div className="bg-white text-[#ff4444] px-4 py-2 rounded">00s</div>
          </div>
          {countdownUrgencyText && (
            <p className="mt-4 text-sm">
              <InlineEditableText
                tag="p"
                value={countdownUrgencyText}
                onSave={onSaveInline('countdownUrgencyText')}
                className="inline-block"
                style={{ color: 'white' }}
              />
            </p>
          )}
        </div>
      </div>

      {/* 7. Seção de Transformação (editável) */}
      <div className="py-8">
        <div className="space-y-8">
          <div className="text-center">
            <h2 className="text-3xl font-bold text-[#432818] mb-4">
              <InlineEditableText
                tag="h2"
                value={transformationTitle || 'Transformação Completa'}
                onSave={onSaveInline('transformationTitle')}
                className="inline-block"
              />
            </h2>
            <p className="text-lg text-[#6B4F43]">
              <InlineEditableText
                isTextArea
                value={transformationSubtitle || 'Tudo que você precisa para descobrir e aplicar seu estilo'}
                onSave={onSaveInline('transformationSubtitle')}
                className="inline-block w-full"
              />
            </p>
          </div>

          {transformationMainGuideImage && (
            <div className="text-center">
              {/*  */}
              <img
                src={transformationMainGuideImage}
                alt="Guia Principal"
                className="max-w-md mx-auto rounded-lg shadow-lg"
                onError={(e) => { (e.currentTarget.src = 'https://placehold.co/400x300/cccccc/333333?text=Guia'); }}
              />
            </div>
          )}

          <div className="grid md:grid-cols-2 gap-6">
            {/* OBSERVAÇÃO: Bônus da transformação editados via JSON-editor no painel de propriedades. */}
            {(mockTransformationBonuses).map((bonus: BonusItem, index: number) => (
              <div key={index} className="bg-white p-6 rounded-lg shadow-lg border border-[#B89B7A]/20">
                <div className="text-center space-y-4">
                  <h3 className="text-xl font-bold text-[#432818]">{bonus.title}</h3>
                  <p className="text-[#6B4F43]">{bonus.description}</p>
                  <p className="text-lg font-bold text-[#B89B7A]">{bonus.value}</p>
                  {bonus.image && (
                    // 
                    <img
                      src={bonus.image}
                      alt={bonus.title}
                      className="w-full max-w-xs mx-auto rounded-lg"
                      onError={(e) => { (e.currentTarget.src = 'https://placehold.co/200x150/cccccc/333333?text=Bonus'); }}
                    />
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* 8. Seção de Preço (editável) */}
      <div className="py-8">
        <div className="max-w-md mx-auto bg-white p-6 rounded-lg shadow-lg border border-[#B89B7A]/20">
          <div className="text-center space-y-4">
            <div className="relative">
              <p className="text-2xl text-gray-500 line-through">
                {pricingOriginal || 'R$ 175,00'}
              </p>
              <span className="absolute -top-2 -right-2 bg-[#ff4444] text-white px-2 py-1 rounded text-sm">
                {pricingDiscount || '77% OFF'}
              </span>
            </div>
            <p className="text-4xl font-bold text-[#B89B7A]">
              {pricingCurrent || 'R$ 39,90'}
            </p>
            <p className="text-sm text-[#ff4444] font-medium">
              <InlineEditableText
                tag="p"
                value={pricingUrgency || 'Oferta por tempo limitado!'}
                onSave={onSaveInline('pricingUrgency')}
                className="inline-block"
                style={{ color: '#ff4444' }}
              />
            </p>
            <Button
              className="w-full bg-[#B89B7A] hover:bg-[#aa6b5d] text-white py-3 text-lg"
              disabled={disabled} // Desabilitado no editor
            >
              <span className="flex items-center justify-center gap-2">
                {/*  */}
                <ShoppingCart className="w-4 h-4" />
                <InlineEditableText
                  tag="span"
                  value={pricingCtaText || 'Quero Descobrir Meu Estilo!'}
                  onSave={onSaveInline('pricingCtaText')}
                  className="inline-block"
                  style={{ color: 'white' }}
                />
              </span>
            </Button>
          </div>
        </div>
      </div>

      {/* 9. Garantia (editável) */}
      <div className="py-6">
        <div className="max-w-2xl mx-auto text-center bg-[#f9f4ef] p-6 rounded-lg border border-[#B89B7A]/20">
          <div className="flex items-center justify-center mb-4">
            {/*  */}
            <Shield className="w-12 h-12 text-[#B89B7A]" />
          </div>
          <h3 className="text-xl font-bold text-[#432818] mb-3">
            <InlineEditableText
              tag="h3"
              value={guaranteeTitle || 'Garantia de 7 Dias'}
              onSave={onSaveInline('guaranteeTitle')}
              className="inline-block"
            />
          </h3>
          <p className="text-[#6B4F43]">
            <InlineEditableText
              isTextArea
              value={guaranteeDescription || 'Estou tão confiante de que estes materiais vão transformar sua relação com a sua imagem pessoal que ofereço uma garantia incondicional de 7 dias.'}
              onSave={onSaveInline('guaranteeDescription')}
              className="inline-block w-full"
            />
          </p>
        </div>
      </div>

      {/* 10. FAQ (editável) */}
      <div className="py-8">
        <div className="max-w-3xl mx-auto">
          <h2 className="text-2xl font-bold text-center text-[#432818] mb-8">
            Perguntas Frequentes
          </h2>
          <div className="space-y-4">
            {/* OBSERVAÇÃO: Perguntas do FAQ editadas via JSON-editor no painel de propriedades. */}
            {(mockFaqQuestions).map((faq: FaqItem, index: number) => (
              <div key={index} className="bg-white p-6 rounded-lg shadow-md border border-[#B89B7A]/20">
                <h3 className="font-bold text-[#432818] mb-2">{faq.question}</h3>
                <p className="text-[#6B4F43]">{faq.answer}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};




