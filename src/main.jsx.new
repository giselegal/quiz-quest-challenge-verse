import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';
import { displayVersion } from './utils/version';
import { injectCriticalCSS, initialCriticalCSS, removeCriticalCSS } from './utils/critical-css';
import { initializeResourcePreloading } from './utils/preloadResources';

// Iniciar preload de recursos críticos o quanto antes - isso é a maior prioridade
// para melhorar o Largest Contentful Paint (LCP)
initializeResourcePreloading();

// Injetar CSS crítico para renderização inicial mais rápida
injectCriticalCSS(initialCriticalCSS);

// Carregar utilitários não-críticos de forma lazy
const loadNonCriticalUtils = () => {
  // Importações dinâmicas para utilitários não críticos para o carregamento inicial
  import('./utils/siteHealthCheck').then(module => {
    const { checkSiteHealth } = module;
    checkSiteHealth();
  });
  
  import('./utils/funnelMonitor').then(module => {
    const { monitorFunnelRoutes } = module;
    monitorFunnelRoutes();
  });

  // Carregar otimizações de design do funil 2
  import('./utils/funnel2DesignOptimizations').then(module => {
    const { optimizeFunnel2Design } = module;
    optimizeFunnel2Design();
  });
  
  // Exibir informações de versão no console
  displayVersion();
};

// Programar carregamento de utilidades não críticas para depois do LCP
if ('requestIdleCallback' in window) {
  window.requestIdleCallback(loadNonCriticalUtils, { timeout: 2000 });
} else {
  setTimeout(loadNonCriticalUtils, 2000);
}

// Iniciar medição de performance apenas em desenvolvimento
if (process.env.NODE_ENV !== 'production') {
  console.time('App Render');
}

// Preparar o elemento root e renderizar a aplicação
const prepareRootAndRender = () => {
  try {
    const rootElement = document.getElementById('root');
    if (rootElement) {
      // Remover o spinner de carregamento se existir
      const loadingFallback = rootElement.querySelector('.loading-fallback');
      if (loadingFallback) {
        loadingFallback.style.display = 'none';
      }
      
      ReactDOM.createRoot(rootElement).render(
        <React.StrictMode>
          <App />
        </React.StrictMode>
      );
    } else {
      console.error('Elemento root não encontrado!');
    }
  } catch (error) {
    console.error('Erro ao renderizar o aplicativo:', error);
    const rootElement = document.getElementById('root');
    if (rootElement) {
      rootElement.innerHTML = `
        <div style="padding: 20px; text-align: center;">
          <h2>Oops! Algo deu errado.</h2>
          <p>Estamos trabalhando para resolver. Por favor, tente recarregar a página.</p>
          <button onclick="window.location.reload()" style="padding: 8px 16px; background: #B89B7A; color: white; border: none; border-radius: 4px; cursor: pointer; margin-top: 15px;">
            Recarregar Página
          </button>
        </div>
      `;
    }
  }
};

// Executar a renderização imediatamente
prepareRootAndRender();

// Remover CSS crítico após carregamento completo
window.addEventListener('load', () => {
  if (process.env.NODE_ENV !== 'production') {
    console.timeEnd('App Render');
    console.log('Componentes carregados, removendo CSS crítico');
  }
  
  // Programar remoção do CSS crítico após carregamento completo
  setTimeout(removeCriticalCSS, 1000);
  
  // Aplicar correção para imagens borradas - mas com atraso para dar prioridade ao LCP
  if (typeof window.fixBlurryIntroQuizImages === 'function') {
    // Usar requestIdleCallback para priorizar renderização primeiro
    if ('requestIdleCallback' in window) {
      window.requestIdleCallback(() => {
        window.fixBlurryIntroQuizImages();
      }, { timeout: 1000 });
    } else {
      setTimeout(window.fixBlurryIntroQuizImages, 1000);
    }
  }
});
