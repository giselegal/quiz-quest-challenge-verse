/**
 * Script de demonstra√ß√£o para uso das ferramentas de diagn√≥stico de imagem
 * 
 * Este arquivo mostra como utilizar todas as ferramentas de diagn√≥stico
 * de imagens implementadas para resolver problemas na introdu√ß√£o do Quiz Sell Genius.
 * 
 * Execu√ß√£o: 
 * 1. Importe este arquivo em um componente tempor√°rio
 * 2. Chame a fun√ß√£o runDiagnosticDemo() no console
 */

import { analyzeImageUrl } from '../utils/ImageChecker';
import { checkRenderedImages, generateImageReport } from '../utils/images/diagnostic';
import { runImageUrlAnalysis } from '../utils/tests/imageUrlAnalyzer';
import { imageCache } from '../utils/images/caching';

/**
 * Executa uma demonstra√ß√£o completa do diagn√≥stico de imagens
 */
export const runDiagnosticDemo = () => {
  console.group('üîç DEMONSTRA√á√ÉO DE DIAGN√ìSTICO DE IMAGENS');
  console.log('Iniciando diagn√≥stico completo...');

  // 1. Verificar imagens renderizadas na p√°gina
  console.group('1Ô∏è‚É£ Verifica√ß√£o de Imagens Renderizadas');
  const renderedIssues = checkRenderedImages();
  console.log(`Encontrados ${renderedIssues.length} problemas em imagens renderizadas.`);
  console.groupEnd();

  // 2. Gerar relat√≥rio completo
  console.group('2Ô∏è‚É£ Relat√≥rio Completo');
  const report = generateImageReport();
  console.log('Relat√≥rio gerado:', report);
  console.groupEnd();

  // 3. Analisar o cache de imagens
  console.group('3Ô∏è‚É£ An√°lise do Cache de Imagens');
  const cachedImages = imageCache.getAll();
  console.log(`${Object.keys(cachedImages).length} imagens em cache.`);
  
  // Mostrar estat√≠sticas de tamanho
  const totalSize = Object.values(cachedImages).reduce((sum, entry: any) => sum + (entry.size || 0), 0);
  console.log(`Tamanho total em cache: ${(totalSize / 1024).toFixed(2)} KB`);
  
  // Mostrar estat√≠sticas de tempo de carregamento
  const loadTimes = Object.values(cachedImages)
    .filter((entry: any) => entry.loadTime)
    .map((entry: any) => entry.loadTime);
    
  if (loadTimes.length > 0) {
    const avgLoadTime = loadTimes.reduce((sum, time) => sum + time, 0) / loadTimes.length;
    const maxLoadTime = Math.max(...loadTimes);
    console.log(`Tempo m√©dio de carregamento: ${avgLoadTime.toFixed(2)}ms`);
    console.log(`Tempo m√°ximo de carregamento: ${maxLoadTime}ms`);
  }
  console.groupEnd();

  // 4. Testar an√°lise de URLs espec√≠ficas
  console.group('4Ô∏è‚É£ An√°lise de URLs Espec√≠ficas');
  
  // Obter algumas URLs de imagens da p√°gina para analisar
  const imgUrls = Array.from(document.querySelectorAll('img'))
    .map(img => img.src)
    .filter(src => src) // Filtrar URLs vazias
    .slice(0, 3);  // Limitar a 3 exemplos
  
  if (imgUrls.length > 0) {
    imgUrls.forEach((url, i) => {
      console.group(`Imagem ${i+1}: ${url.substring(0, 50)}...`);
      const analysis = analyzeImageUrl(url);
      console.log('An√°lise:', analysis);
      console.groupEnd();
    });
  } else {
    console.log('Nenhuma imagem encontrada na p√°gina para an√°lise.');
  }
  console.groupEnd();

  // 5. Executar an√°lise em lote com o imageUrlAnalyzer
  console.group('5Ô∏è‚É£ An√°lise em Lote (imageUrlAnalyzer)');
  runImageUrlAnalysis();
  console.groupEnd();

  // 6. Sugerir pr√≥ximos passos
  console.group('6Ô∏è‚É£ Pr√≥ximos Passos');
  console.log('Com base nos resultados acima, considere:');
  console.log('‚Ä¢ Verificar URLs de imagens com problemas');
  console.log('‚Ä¢ Comparar tempos de carregamento de diferentes imagens');
  console.log('‚Ä¢ Identificar padr√µes de problemas recorrentes');
  console.log('‚Ä¢ Testar em diferentes dispositivos e conex√µes');
  console.log('‚Ä¢ Documentar resultados para refer√™ncia futura');
  console.groupEnd();

  console.groupEnd();
  return 'Demonstra√ß√£o de diagn√≥stico de imagens conclu√≠da!';
};

// Fun√ß√£o para analisar especificamente imagens da introdu√ß√£o
export const analyzeIntroImages = () => {
  console.group('üñºÔ∏è An√°lise de Imagens da Introdu√ß√£o');
  
  const introImages = Array.from(document.querySelectorAll('.quiz-intro img, [data-section="intro"] img'));
  console.log(`Encontradas ${introImages.length} imagens na introdu√ß√£o.`);
  
  if (introImages.length > 0) {
    introImages.forEach((img: HTMLImageElement, i) => {
      console.group(`Imagem da Introdu√ß√£o ${i+1}`);
      console.log('Elemento:', img);
      console.log('URL:', img.src);
      console.log('Tamanho renderizado:', `${img.width}x${img.height}px`);
      console.log('Tamanho natural:', `${img.naturalWidth}x${img.naturalHeight}px`);
      
      // Analisar a URL
      const analysis = analyzeImageUrl(img.src);
      console.log('An√°lise da URL:', analysis);
      
      // Verificar se est√° no cache
      const cacheEntry = imageCache.get(img.src);
      if (cacheEntry) {
        console.log('Informa√ß√µes do cache:', cacheEntry);
      } else {
        console.warn('Imagem n√£o encontrada no cache!');
      }
      
      console.groupEnd();
    });
  }
  
  console.groupEnd();
  return 'An√°lise de imagens da introdu√ß√£o conclu√≠da!';
};

export default {
  runDiagnosticDemo,
  analyzeIntroImages
};
