// src/utils/builderConfig.ts
import { builder } from '@builder.io/react';
import { BUILDER_CONFIG } from '../config/builderConfig.js';

// Usar API Key configurada (produ√ß√£o, demo ou offline)
const BUILDER_API_KEY = BUILDER_CONFIG.getActiveApiKey();

// Fun√ß√£o segura para registrar componentes
const registerComponentsSafely = async () => {
  try {
    const { registerComponents } = await import('./builderComponentRegistry');
    registerComponents();
  } catch (error) {
    console.warn('Erro ao registrar componentes Builder.io:', error);
  }
};

// Inicializar Builder.io de forma segura
const initializeBuilderSafely = () => {
  try {
    // Mostrar informa√ß√µes sobre a API key atual
    console.log(`üîß Builder.io Mode: ${BUILDER_CONFIG.CURRENT_MODE}`);
    console.log(`üîë API Key: ${BUILDER_API_KEY.substring(0, 8)}...`);
    
    // Verificar modo offline
    if (BUILDER_CONFIG.isOfflineMode()) {
      console.log('üîå Modo offline ativo - Builder.io n√£o ser√° inicializado');
      return;
    }
    
    if (BUILDER_CONFIG.isDemoMode()) {
      console.warn('‚ö†Ô∏è  USANDO API KEY DE DEMONSTRA√á√ÉO - Para produ√ß√£o, configure uma API key v√°lida em BUILDER_CONFIG');
    }
    
    // Inicializar Builder.io apenas com a API key
    builder.init(BUILDER_API_KEY);

    // Registrar componentes customizados de forma ass√≠ncrona
    registerComponentsSafely();
    
    console.log('‚úÖ Builder.io inicializado com sucesso');
  } catch (error) {
    console.warn('‚ùå Erro ao inicializar Builder.io:', error);
  }
};

export { builder };

// Exportar fun√ß√£o para re-inicializar com nova API key quando necess√°rio
export const reinitializeBuilder = (apiKey: string) => {
  try {
    builder.init(apiKey);
    // Re-registrar componentes ap√≥s reinicializa√ß√£o
    registerComponentsSafely();
  } catch (error) {
    console.error('Erro ao reinicializar Builder.io:', error);
  }
};

// Exportar fun√ß√£o de inicializa√ß√£o segura
export const initializeBuilder = initializeBuilderSafely;
