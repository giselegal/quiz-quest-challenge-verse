#!/bin/bash

# Script de verifica√ß√£o pr√©-deploy para garantir otimiza√ß√µes de desempenho
# Autor: GitHub Copilot
# Data: 14 de maio de 2025

echo "üöÄ Iniciando verifica√ß√µes pr√©-deploy para otimiza√ß√µes de desempenho..."

# Cores para melhor legibilidade
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Array para coletar erros
errors=()
warnings=()

echo "üîç Verificando arquivos cr√≠ticos..."

# Verificar se .htaccess est√° presente
if [ -f "./htaccess-final.txt" ]; then
  echo -e "${GREEN}‚úÖ htaccess-final.txt encontrado${NC}"
  
  # Verificar configura√ß√µes de cache
  if grep -q "ExpiresByType.*1 year" "./htaccess-final.txt"; then
    echo -e "${GREEN}‚úÖ Configura√ß√µes de cache de longo prazo encontradas${NC}"
  else
    warnings+=("‚ö†Ô∏è htaccess-final.txt n√£o possui configura√ß√µes de cache de longo prazo")
  fi
  
  # Verificar headers de Cache-Control
  if grep -q "Cache-Control.*immutable" "./htaccess-final.txt"; then
    echo -e "${GREEN}‚úÖ Headers Cache-Control immutable encontrados${NC}"
  else
    warnings+=("‚ö†Ô∏è htaccess-final.txt n√£o possui headers Cache-Control imut√°veis")
  fi
else
  errors+=("‚ùå htaccess-final.txt n√£o encontrado - necess√°rio para configura√ß√µes de cache!")
fi

# Verificar configura√ß√µes de browserslist
if [ -f "./.browserslistrc" ]; then
  echo -e "${GREEN}‚úÖ .browserslistrc encontrado${NC}"
  
  # Verificar se navegadores legados est√£o exclu√≠dos
  if grep -q "not IE 11" "./.browserslistrc"; then
    echo -e "${GREEN}‚úÖ Navegadores legados est√£o exclu√≠dos${NC}"
  else
    warnings+=("‚ö†Ô∏è .browserslistrc pode incluir navegadores obsoletos - verifique as configura√ß√µes")
  fi
else
  warnings+=("‚ö†Ô∏è .browserslistrc n√£o encontrado - transpila√ß√£o JS pode ser excessiva")
fi

# Verificar configura√ß√µes de preload no HTML
if [ -f "./index.html" ]; then
  echo -e "${GREEN}‚úÖ index.html encontrado${NC}"
  
  # Verificar preconnect para recursos externos
  if grep -q "preconnect.*cloudinary" "./index.html"; then
    echo -e "${GREEN}‚úÖ Preconnect para Cloudinary encontrado${NC}"
  else
    warnings+=("‚ö†Ô∏è Preconnect para Cloudinary n√£o encontrado no index.html")
  fi
  
  # Verificar carregamento de fontes otimizado
  if grep -q "fonts.*media=\"print\".*onload" "./index.html"; then
    echo -e "${GREEN}‚úÖ Carregamento otimizado de fontes encontrado${NC}"
  else
    warnings+=("‚ö†Ô∏è Fontes podem n√£o estar carregando de forma otimizada")
  fi
  
  # Verificar scripts ass√≠ncronos
  if grep -q "script.*async" "./index.html"; then
    echo -e "${GREEN}‚úÖ Scripts ass√≠ncronos encontrados${NC}"
    
    # Verificar se n√£o h√° scripts com atributos async/defer misturados
    if grep -q "script.*async.*defer" "./index.html"; then
      errors+=("‚ùå Scripts com atributos async e defer misturados encontrados - isso causa problemas de build!")
    else
      echo -e "${GREEN}‚úÖ Nenhum script com atributos async/defer misturados${NC}"
    fi
  else
    warnings+=("‚ö†Ô∏è Scripts podem n√£o estar carregando de forma ass√≠ncrona")
  fi
else
  errors+=("‚ùå index.html n√£o encontrado!")
fi

# Verificar configura√ß√µes de code-splitting no vite.config.ts
if [ -f "./vite.config.ts" ]; then
  echo -e "${GREEN}‚úÖ vite.config.ts encontrado${NC}"
  
  # Verificar se config de chunks est√° correta
  if grep -q "'vendor-router': \['react-router-dom'\]" "./vite.config.ts"; then
    echo -e "${GREEN}‚úÖ Configura√ß√£o de vendor-router correta${NC}"
  else
    if grep -q "'vendor-router': \['react-router" "./vite.config.ts"; then
      warnings+=("‚ö†Ô∏è Configura√ß√£o de vendor-router pode estar incorreta - verifique se est√° usando apenas 'react-router-dom'")
    fi
  fi
else
  errors+=("‚ùå vite.config.ts n√£o encontrado!")
fi

# Verificar script de preload de recursos
if [ -f "./src/utils/preloadResources.ts" ]; then
  echo -e "${GREEN}‚úÖ Utilit√°rio de preload encontrado${NC}"
  
  # Verificar se a configura√ß√£o de vendor-router est√° correta
  if grep -q "vendor-router.*React Router DOM" "./src/utils/preloadResources.ts"; then
    echo -e "${GREEN}‚úÖ Refer√™ncia correta a React Router DOM no preload${NC}"
  fi
else
  warnings+=("‚ö†Ô∏è Utilit√°rio de preload n√£o encontrado - recursos cr√≠ticos podem carregar tarde")
fi

# Verificar se o build foi executado com sucesso
if [ -d "./dist" ]; then
  echo -e "${GREEN}‚úÖ Pasta dist encontrada${NC}"
  
  # Verificar tamanho dos bundles principais
  js_size=$(find ./dist -name "*.js" -type f -exec du -ch {} \; | grep total$ | cut -f1)
  echo -e "${GREEN}‚úÖ Tamanho total dos arquivos JS: ${js_size}${NC}"
  
  css_size=$(find ./dist -name "*.css" -type f -exec du -ch {} \; | grep total$ | cut -f1)
  echo -e "${GREEN}‚úÖ Tamanho total dos arquivos CSS: ${css_size}${NC}"
  
  # Verificar se h√° c√≥digo dividido (code-splitting)
  js_count=$(find ./dist -name "*.js" | wc -l)
  if [ "$js_count" -gt "3" ]; then
    echo -e "${GREEN}‚úÖ Code-splitting parece estar funcionando corretamente${NC}"
  else
    warnings+=("‚ö†Ô∏è Poucos arquivos JS detectados - code-splitting pode n√£o estar funcionando")
  fi
else
  errors+=("‚ùå Pasta dist n√£o encontrada - execute npm run build primeiro!")
fi

# Relat√≥rio final
echo ""
echo "üìä Resumo da verifica√ß√£o pr√©-deploy:"
echo "--------------------------------"

if [ ${#errors[@]} -eq 0 ] && [ ${#warnings[@]} -eq 0 ]; then
  echo -e "${GREEN}üéâ Nenhum problema encontrado! Seu site est√° otimizado para performance.${NC}"
else
  # Exibir erros
  if [ ${#errors[@]} -gt 0 ]; then
    echo -e "${RED}‚ùå ERROS CR√çTICOS ENCONTRADOS:${NC}"
    for error in "${errors[@]}"; do
      echo -e "${RED}$error${NC}"
    done
    echo ""
  fi
  
  # Exibir avisos
  if [ ${#warnings[@]} -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è AVISOS (n√£o bloqueiam o deploy, mas considere resolver):${NC}"
    for warning in "${warnings[@]}"; do
      echo -e "${YELLOW}$warning${NC}"
    done
  fi
fi

echo ""
echo "üìù Recomenda√ß√µes finais:"
echo "1. Execute testes Lighthouse ap√≥s o deploy para confirmar melhorias"
echo "2. Verifique o impacto das otimiza√ß√µes nas m√©tricas reais de usu√°rios"
echo "3. Considere configurar monitoramento cont√≠nuo de desempenho"

# Sair com c√≥digo de erro se houver problemas cr√≠ticos
if [ ${#errors[@]} -gt 0 ]; then
  echo -e "${RED}‚õî Existem problemas cr√≠ticos que devem ser corrigidos antes do deploy!${NC}"
  exit 1
else
  echo -e "${GREEN}‚úÖ Verifica√ß√£o conclu√≠da com sucesso!${NC}"
  exit 0
fi
