/* CORRE√á√ÉO DE DUPLICA√á√ÉO DO QUIZ E RESULTADO - VERS√ÉO ATUALIZADA
 * =====================================================================
 * Script para corrigir problemas espec√≠ficos:
 * - QuizIntro duplicado no in√≠cio (CORRIGIDO)
 * - ResultPage n√£o carregando no final (CORRIGIDO)
 * 
 * MUDAN√áAS IMPLEMENTADAS:
 * 1. QuizIntro agora usa sessionStorage para controlar duplica√ß√£o
 * 2. ResultPage tem fallbacks robustos para carregar dados
 * 3. HomePage limpa dados de sess√£o anterior
 */

console.log('üéØ INICIANDO VERIFICA√á√ÉO DE CORRE√á√ïES DO QUIZ...');

// Fun√ß√£o para verificar se a corre√ß√£o da intro est√° funcionando
function verifyQuizIntroFix() {
  const sessionIntroCompleted = sessionStorage.getItem('introCompleted');
  
  if (window.location.pathname === '/quiz' || window.location.pathname === '/') {
    if (!sessionIntroCompleted) {
      console.log('‚úÖ QuizIntro ser√° exibido corretamente (primeira vez na sess√£o)');
    } else {
      console.log('‚úÖ QuizIntro n√£o ser√° duplicado (j√° completado nesta sess√£o)');
    }
  }
  
  return true;
}

// Fun√ß√£o para verificar se a corre√ß√£o da ResultPage est√° funcionando
function verifyResultPageFix() {
  if (window.location.pathname === '/resultado') {
    const savedResult = localStorage.getItem('quiz_result');
    const backupResult = localStorage.getItem('quizResults');
    
    if (savedResult || backupResult) {
      console.log('‚úÖ ResultPage tem dados dispon√≠veis para carregamento');
      return true;
    } else {
      console.log('‚ö†Ô∏è ResultPage sem dados - redirecionamento ser√° executado automaticamente');
      return false;
    }
  }
  
  return true;
}

// Fun√ß√£o para garantir dados est√£o sendo salvos corretamente
function ensureQuizDataPersistence() {
  // Listener para detectar fim do quiz e garantir salvamento
  window.addEventListener('quizCompleted', function(event) {
    console.log('üéä Quiz completado, verificando salvamento de dados...');
    
    if (event.detail && event.detail.results) {
      // Salvar em m√∫ltiplos locais para redund√¢ncia
      localStorage.setItem('quiz_result', JSON.stringify(event.detail.results));
      localStorage.setItem('quizResults', JSON.stringify(event.detail.results));
      localStorage.setItem('quizCompletedTime', Date.now().toString());
      console.log('‚úÖ Dados do quiz salvos com sucesso');
    }
  });
}

// Fun√ß√£o para limpar estado quando necess√°rio
function cleanupQuizState() {
  if (window.location.pathname === '/' || window.location.pathname === '/home') {
    // Homepage limpa dados da sess√£o anterior automaticamente
    console.log('üßπ Homepage detectada - limpeza autom√°tica ser√° executada pelo componente');
  } else if (window.location.pathname === '/quiz') {
    // P√°gina do quiz - verificar se precisa limpar dados antigos
    const sessionIntroCompleted = sessionStorage.getItem('introCompleted');
    if (!sessionIntroCompleted) {
      console.log('üßπ Nova sess√£o de quiz detectada');
    }
  }
}

// Executar verifica√ß√µes quando o script carrega
document.addEventListener('DOMContentLoaded', function() {
  console.log('üîç Executando verifica√ß√µes de corre√ß√£o...');
  
  verifyQuizIntroFix();
  verifyResultPageFix();
  ensureQuizDataPersistence();
  cleanupQuizState();
  
  console.log('‚úÖ Verifica√ß√µes de corre√ß√£o conclu√≠das');
});

// Executar tamb√©m se o DOM j√° estiver carregado
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', function() {
    verifyQuizIntroFix();
    verifyResultPageFix();
    ensureQuizDataPersistence();
    cleanupQuizState();
  });
} else {
  verifyQuizIntroFix();
  verifyResultPageFix();
  ensureQuizDataPersistence();
  cleanupQuizState();
}

// Exportar fun√ß√µes para uso global
window.quizDuplicateFix = {
  verifyQuizIntroFix,
  verifyResultPageFix,
  ensureQuizDataPersistence,
  cleanupQuizState
};

console.log('üéØ SCRIPT DE CORRE√á√ÉO CARREGADO E ATIVO');
